
bluetoothd-sdpd-request.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <sdp_set_cstate_pdu>:
	return -1;
}

static int sdp_set_cstate_pdu(sdp_buf_t *buf, sdp_cont_state_t *cstate)
{
	uint8_t *pdata = buf->data + buf->data_size;
       0:	8b 47 08             	mov    0x8(%rdi),%eax
       3:	48 03 07             	add    (%rdi),%rax
	int length = 0;

	if (cstate) {
       6:	48 85 f6             	test   %rsi,%rsi
       9:	74 1d                	je     28 <sdp_set_cstate_pdu+0x28>
		SDPDBG("Non null sdp_cstate_t id : 0x%x", cstate->timestamp);
		*pdata = sizeof(sdp_cont_state_t);
       b:	c6 00 08             	movb   $0x8,(%rax)
		pdata += sizeof(uint8_t);
		length += sizeof(uint8_t);
		memcpy(pdata, cstate, sizeof(sdp_cont_state_t));
       e:	48 8b 16             	mov    (%rsi),%rdx
      11:	48 89 50 01          	mov    %rdx,0x1(%rax)
      15:	ba 09 00 00 00       	mov    $0x9,%edx
		length += sizeof(sdp_cont_state_t);
      1a:	b8 09 00 00 00       	mov    $0x9,%eax
	} else {
		/* set "null" continuation state */
		*pdata = 0;
		length += sizeof(uint8_t);
	}
	buf->data_size += length;
      1f:	01 57 08             	add    %edx,0x8(%rdi)
	return length;
}
      22:	c3                   	retq   
      23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		*pdata = 0;
      28:	c6 00 00             	movb   $0x0,(%rax)
      2b:	ba 01 00 00 00       	mov    $0x1,%edx
		length += sizeof(uint8_t);
      30:	b8 01 00 00 00       	mov    $0x1,%eax
	buf->data_size += length;
      35:	01 57 08             	add    %edx,0x8(%rdi)
}
      38:	c3                   	retq   
      39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000040 <extract_des>:
{
      40:	41 57                	push   %r15
      42:	41 56                	push   %r14
      44:	41 55                	push   %r13
      46:	41 54                	push   %r12
      48:	45 89 c4             	mov    %r8d,%r12d
      4b:	55                   	push   %rbp
      4c:	53                   	push   %rbx
      4d:	48 89 fb             	mov    %rdi,%rbx
      50:	48 83 ec 48          	sub    $0x48,%rsp
      54:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
      59:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
	scanned = sdp_extract_seqtype(buf, len, &seqType, &data_size);
      5e:	48 8d 54 24 37       	lea    0x37(%rsp),%rdx
      63:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
{
      68:	89 74 24 10          	mov    %esi,0x10(%rsp)
	int scanned, data_size = 0;
      6c:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
      73:	00 
	scanned = sdp_extract_seqtype(buf, len, &seqType, &data_size);
      74:	e8 00 00 00 00       	callq  79 <extract_des+0x39>
	if (!scanned || (seqType != SDP_SEQ8 && seqType != SDP_SEQ16)) {
      79:	85 c0                	test   %eax,%eax
	scanned = sdp_extract_seqtype(buf, len, &seqType, &data_size);
      7b:	89 44 24 14          	mov    %eax,0x14(%rsp)
	if (!scanned || (seqType != SDP_SEQ8 && seqType != SDP_SEQ16)) {
      7f:	0f 84 4b 02 00 00    	je     2d0 <extract_des+0x290>
      85:	0f b6 44 24 37       	movzbl 0x37(%rsp),%eax
      8a:	83 e8 35             	sub    $0x35,%eax
      8d:	3c 01                	cmp    $0x1,%al
      8f:	0f 87 3b 02 00 00    	ja     2d0 <extract_des+0x290>
	p = buf + scanned;
      95:	8b 44 24 14          	mov    0x14(%rsp),%eax
		int localSeqLength = 0;
      99:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%rsp)
      a0:	00 
	p = buf + scanned;
      a1:	48 63 e8             	movslq %eax,%rbp
      a4:	48 01 dd             	add    %rbx,%rbp
	bufsize = len - scanned;
      a7:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
      ab:	29 c3                	sub    %eax,%ebx
      ad:	48 63 db             	movslq %ebx,%rbx
		if (bufsize < sizeof(uint8_t)) {
      b0:	48 85 db             	test   %rbx,%rbx
      b3:	0f 84 58 02 00 00    	je     311 <extract_des+0x2d1>
	int status = 0;
      b9:	45 31 f6             	xor    %r14d,%r14d
	sdp_list_t *pSeq = NULL;
      bc:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
      c3:	00 00 
	int seqlen = 0;
      c5:	45 31 ed             	xor    %r13d,%r13d
		if (expectedType == SDP_TYPE_UUID) {
      c8:	41 80 fc fe          	cmp    $0xfe,%r12b
		dataType = *p;
      cc:	44 0f b6 7d 00       	movzbl 0x0(%rbp),%r15d
		if (expectedType == SDP_TYPE_UUID) {
      d1:	0f 84 79 01 00 00    	je     250 <extract_des+0x210>
		} else if (expectedType == SDP_TYPE_ATTRID &&
      d7:	41 80 fc ff          	cmp    $0xff,%r12b
      db:	0f 84 8f 01 00 00    	je     270 <extract_des+0x230>
		} else if (expectedType != SDP_TYPE_ATTRID && dataType != expectedType) {
      e1:	45 38 e7             	cmp    %r12b,%r15b
      e4:	0f 85 95 00 00 00    	jne    17f <extract_des+0x13f>
		switch (dataType) {
      ea:	41 8d 47 f7          	lea    -0x9(%r15),%eax
      ee:	3c 13                	cmp    $0x13,%al
      f0:	0f 87 98 00 00 00    	ja     18e <extract_des+0x14e>
      f6:	0f b6 c0             	movzbl %al,%eax
      f9:	ff 24 c5 00 00 00 00 	jmpq   *0x0(,%rax,8)
			puuid = malloc(sizeof(uuid_t));
     100:	bf 14 00 00 00       	mov    $0x14,%edi
     105:	e8 00 00 00 00       	callq  10a <extract_des+0xca>
			status = sdp_uuid_extract(p, bufsize, puuid, &localSeqLength);
     10a:	48 8d 4c 24 3c       	lea    0x3c(%rsp),%rcx
     10f:	48 89 c2             	mov    %rax,%rdx
     112:	89 de                	mov    %ebx,%esi
     114:	48 89 ef             	mov    %rbp,%rdi
     117:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
     11c:	e8 00 00 00 00       	callq  121 <extract_des+0xe1>
			if (status < 0) {
     121:	85 c0                	test   %eax,%eax
			status = sdp_uuid_extract(p, bufsize, puuid, &localSeqLength);
     123:	41 89 c6             	mov    %eax,%r14d
			if (status < 0) {
     126:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
     12b:	0f 88 ee 01 00 00    	js     31f <extract_des+0x2df>
			seqlen += localSeqLength;
     131:	48 63 44 24 3c       	movslq 0x3c(%rsp),%rax
     136:	41 01 c5             	add    %eax,%r13d
			p += localSeqLength;
     139:	48 01 c5             	add    %rax,%rbp
			bufsize -= localSeqLength;
     13c:	48 29 c3             	sub    %rax,%rbx
		if (status == 0) {
     13f:	45 85 f6             	test   %r14d,%r14d
     142:	0f 85 a5 00 00 00    	jne    1ed <extract_des+0x1ad>
			pSeq = sdp_list_append(pSeq, pElem);
     148:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
     14d:	4c 89 ce             	mov    %r9,%rsi
     150:	e8 00 00 00 00       	callq  155 <extract_des+0x115>
			if (seqlen == data_size)
     155:	44 3b 6c 24 38       	cmp    0x38(%rsp),%r13d
			pSeq = sdp_list_append(pSeq, pElem);
     15a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
			if (seqlen == data_size)
     15f:	0f 84 8b 01 00 00    	je     2f0 <extract_des+0x2b0>
			else if (seqlen > data_size || seqlen > len)
     165:	7f 18                	jg     17f <extract_des+0x13f>
     167:	44 3b 6c 24 10       	cmp    0x10(%rsp),%r13d
     16c:	7f 11                	jg     17f <extract_des+0x13f>
		if (bufsize < sizeof(uint8_t)) {
     16e:	48 85 db             	test   %rbx,%rbx
		int localSeqLength = 0;
     171:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%rsp)
     178:	00 
		if (bufsize < sizeof(uint8_t)) {
     179:	0f 85 49 ff ff ff    	jne    c8 <extract_des+0x88>
	sdp_list_free(pSeq, free);
     17f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
     184:	be 00 00 00 00       	mov    $0x0,%esi
     189:	e8 00 00 00 00       	callq  18e <extract_des+0x14e>
	return -1;
     18e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
     193:	48 83 c4 48          	add    $0x48,%rsp
     197:	5b                   	pop    %rbx
     198:	5d                   	pop    %rbp
     199:	41 5c                	pop    %r12
     19b:	41 5d                	pop    %r13
     19d:	41 5e                	pop    %r14
     19f:	41 5f                	pop    %r15
     1a1:	c3                   	retq   
     1a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			bufsize -= sizeof(uint8_t);
     1a8:	48 8d 43 ff          	lea    -0x1(%rbx),%rax
			if (bufsize < (int)sizeof(uint32_t)) {
     1ac:	48 83 f8 03          	cmp    $0x3,%rax
     1b0:	76 cd                	jbe    17f <extract_des+0x13f>
			if (expectedType == SDP_TYPE_ATTRID) {
     1b2:	41 80 fc ff          	cmp    $0xff,%r12b
     1b6:	0f 84 f4 00 00 00    	je     2b0 <extract_des+0x270>
				memcpy(&tmp, p, sizeof(tmp));
     1bc:	8b 55 01             	mov    0x1(%rbp),%edx
				pElem = malloc(sizeof(uint32_t));
     1bf:	bf 04 00 00 00       	mov    $0x4,%edi
				memcpy(&tmp, p, sizeof(tmp));
     1c4:	89 54 24 18          	mov    %edx,0x18(%rsp)
				pElem = malloc(sizeof(uint32_t));
     1c8:	e8 00 00 00 00       	callq  1cd <extract_des+0x18d>
#ifdef __GNUC__
# if __GNUC_PREREQ (4, 3)
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
     1cd:	8b 54 24 18          	mov    0x18(%rsp),%edx
     1d1:	49 89 c1             	mov    %rax,%r9
     1d4:	0f ca                	bswap  %edx
	put_unaligned(cpu_to_le32(val), (uint32_t *) dst);
}

static inline void put_be32(uint32_t val, void *dst)
{
	put_unaligned(cpu_to_be32(val), (uint32_t *) dst);
     1d6:	89 10                	mov    %edx,(%rax)
			p += sizeof(uint32_t);
     1d8:	48 83 c5 05          	add    $0x5,%rbp
			seqlen += sizeof(uint32_t);
     1dc:	41 83 c5 05          	add    $0x5,%r13d
			bufsize -= sizeof(uint32_t);
     1e0:	48 83 eb 05          	sub    $0x5,%rbx
		if (status == 0) {
     1e4:	45 85 f6             	test   %r14d,%r14d
     1e7:	0f 84 5b ff ff ff    	je     148 <extract_des+0x108>
			free(pElem);
     1ed:	4c 89 cf             	mov    %r9,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <extract_des+0x1b5>
     1f5:	e9 74 ff ff ff       	jmpq   16e <extract_des+0x12e>
     1fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			bufsize -= sizeof(uint8_t);
     200:	48 8d 43 ff          	lea    -0x1(%rbx),%rax
			if (bufsize < sizeof(uint16_t)) {
     204:	48 83 f8 01          	cmp    $0x1,%rax
     208:	0f 86 71 ff ff ff    	jbe    17f <extract_des+0x13f>
			if (expectedType == SDP_TYPE_ATTRID) {
     20e:	41 80 fc ff          	cmp    $0xff,%r12b
     212:	74 74                	je     288 <extract_des+0x248>
				memcpy(&tmp, p, sizeof(tmp));
     214:	0f b7 45 01          	movzwl 0x1(%rbp),%eax
				pElem = malloc(sizeof(uint16_t));
     218:	bf 02 00 00 00       	mov    $0x2,%edi
				memcpy(&tmp, p, sizeof(tmp));
     21d:	66 89 44 24 18       	mov    %ax,0x18(%rsp)
				pElem = malloc(sizeof(uint16_t));
     222:	e8 00 00 00 00       	callq  227 <extract_des+0x1e7>
     227:	49 89 c1             	mov    %rax,%r9
	put_unaligned(cpu_to_be16(val), (uint16_t *) ptr);
     22a:	0f b7 44 24 18       	movzwl 0x18(%rsp),%eax
     22f:	66 c1 c8 08          	ror    $0x8,%ax
     233:	66 41 89 01          	mov    %ax,(%r9)
			p += sizeof(uint16_t);
     237:	48 83 c5 03          	add    $0x3,%rbp
			seqlen += sizeof(uint16_t);
     23b:	41 83 c5 03          	add    $0x3,%r13d
			bufsize -= sizeof(uint16_t);
     23f:	48 83 eb 03          	sub    $0x3,%rbx
			break;
     243:	e9 f7 fe ff ff       	jmpq   13f <extract_des+0xff>
     248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     24f:	00 
			if (dataType != SDP_UUID16 && dataType != SDP_UUID32 && dataType != SDP_UUID128) {
     250:	41 8d 47 e7          	lea    -0x19(%r15),%eax
     254:	3c 01                	cmp    $0x1,%al
     256:	0f 86 8e fe ff ff    	jbe    ea <extract_des+0xaa>
     25c:	41 80 ff 1c          	cmp    $0x1c,%r15b
     260:	0f 84 84 fe ff ff    	je     ea <extract_des+0xaa>
     266:	e9 14 ff ff ff       	jmpq   17f <extract_des+0x13f>
     26b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
				(dataType != SDP_UINT16 && dataType != SDP_UINT32)) {
     270:	41 8d 47 f7          	lea    -0x9(%r15),%eax
		} else if (expectedType == SDP_TYPE_ATTRID &&
     274:	3c 01                	cmp    $0x1,%al
     276:	0f 86 6e fe ff ff    	jbe    ea <extract_des+0xaa>
     27c:	0f 1f 40 00          	nopl   0x0(%rax)
     280:	e9 fa fe ff ff       	jmpq   17f <extract_des+0x13f>
     285:	0f 1f 00             	nopl   (%rax)
				aid = malloc(sizeof(struct attrid));
     288:	bf 08 00 00 00       	mov    $0x8,%edi
     28d:	e8 00 00 00 00       	callq  292 <extract_des+0x252>
     292:	49 89 c1             	mov    %rax,%r9
				aid->dtd = dataType;
     295:	c6 00 09             	movb   $0x9,(%rax)
	return be16_to_cpu(get_unaligned((const uint16_t *) ptr));
     298:	0f b7 45 01          	movzwl 0x1(%rbp),%eax
     29c:	66 c1 c8 08          	ror    $0x8,%ax
				aid->uint16 = get_be16(p);
     2a0:	66 41 89 41 04       	mov    %ax,0x4(%r9)
     2a5:	eb 90                	jmp    237 <extract_des+0x1f7>
     2a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
     2ae:	00 00 
				aid = malloc(sizeof(struct attrid));
     2b0:	bf 08 00 00 00       	mov    $0x8,%edi
     2b5:	e8 00 00 00 00       	callq  2ba <extract_des+0x27a>
     2ba:	49 89 c1             	mov    %rax,%r9
				aid->dtd = dataType;
     2bd:	c6 00 0a             	movb   $0xa,(%rax)
     2c0:	8b 45 01             	mov    0x1(%rbp),%eax
     2c3:	0f c8                	bswap  %eax
				aid->uint32 = get_be32(p);
     2c5:	41 89 41 04          	mov    %eax,0x4(%r9)
     2c9:	e9 0a ff ff ff       	jmpq   1d8 <extract_des+0x198>
     2ce:	66 90                	xchg   %ax,%ax
		error("Unknown seq type");
     2d0:	31 c0                	xor    %eax,%eax
     2d2:	bf 00 00 00 00       	mov    $0x0,%edi
     2d7:	e8 00 00 00 00       	callq  2dc <extract_des+0x29c>
}
     2dc:	48 83 c4 48          	add    $0x48,%rsp
		return -1;
     2e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
     2e5:	5b                   	pop    %rbx
     2e6:	5d                   	pop    %rbp
     2e7:	41 5c                	pop    %r12
     2e9:	41 5d                	pop    %r13
     2eb:	41 5e                	pop    %r14
     2ed:	41 5f                	pop    %r15
     2ef:	c3                   	retq   
	*svcReqSeq = pSeq;
     2f0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
     2f5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
     2fa:	48 89 08             	mov    %rcx,(%rax)
	*pDataType = dataType;
     2fd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
     302:	44 88 38             	mov    %r15b,(%rax)
	return scanned;
     305:	8b 44 24 14          	mov    0x14(%rsp),%eax
     309:	44 01 e8             	add    %r13d,%eax
     30c:	e9 82 fe ff ff       	jmpq   193 <extract_des+0x153>
	sdp_list_t *pSeq = NULL;
     311:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
     318:	00 00 
     31a:	e9 60 fe ff ff       	jmpq   17f <extract_des+0x13f>
				free(puuid);
     31f:	4c 89 cf             	mov    %r9,%rdi
     322:	e8 00 00 00 00       	callq  327 <extract_des+0x2e7>
				goto failed;
     327:	e9 53 fe ff ff       	jmpq   17f <extract_des+0x13f>
     32c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000330 <sdp_match_uuid>:
 * Return 1 if each and every UUID in the search
 * pattern exists in the target pattern, 0 if the
 * match succeeds and -1 on error.
 */
static int sdp_match_uuid(sdp_list_t *search, sdp_list_t *pattern)
{
     330:	41 55                	push   %r13
     332:	49 89 f5             	mov    %rsi,%r13
     335:	41 54                	push   %r12
     337:	49 89 fc             	mov    %rdi,%r12
     33a:	55                   	push   %rbp
     33b:	53                   	push   %rbx
     33c:	48 83 ec 08          	sub    $0x8,%rsp
void        sdp_list_free(sdp_list_t *list, sdp_free_func_t f);

static inline int sdp_list_len(const sdp_list_t *list)
{
	int n = 0;
	for (; list; list = list->next)
     340:	48 85 f6             	test   %rsi,%rsi
     343:	0f 84 cc 00 00 00    	je     415 <sdp_match_uuid+0xe5>
     349:	48 89 f0             	mov    %rsi,%rax
	int n = 0;
     34c:	31 d2                	xor    %edx,%edx
     34e:	66 90                	xchg   %ax,%ax
	for (; list; list = list->next)
     350:	48 8b 00             	mov    (%rax),%rax
		n++;
     353:	83 c2 01             	add    $0x1,%edx
	for (; list; list = list->next)
     356:	48 85 c0             	test   %rax,%rax
     359:	75 f5                	jne    350 <sdp_match_uuid+0x20>
     35b:	4d 85 e4             	test   %r12,%r12
     35e:	0f 84 a1 00 00 00    	je     405 <sdp_match_uuid+0xd5>
     364:	4c 89 e0             	mov    %r12,%rax
     367:	31 c9                	xor    %ecx,%ecx
     369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     370:	48 8b 00             	mov    (%rax),%rax
		n++;
     373:	83 c1 01             	add    $0x1,%ecx
	for (; list; list = list->next)
     376:	48 85 c0             	test   %rax,%rax
     379:	75 f5                	jne    370 <sdp_match_uuid+0x40>
	 * at all elements to confirm existence of an element
	 * from the search pattern
	 */
	int patlen = sdp_list_len(pattern);

	if (patlen < sdp_list_len(search))
     37b:	39 ca                	cmp    %ecx,%edx
     37d:	7c 76                	jl     3f5 <sdp_match_uuid+0xc5>
		return -1;
	for (; search; search = search->next) {
		uuid_t *uuid128;
		void *data = search->data;
     37f:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
		sdp_list_t *list;
		if (data == NULL)
     384:	48 85 ff             	test   %rdi,%rdi
     387:	74 6c                	je     3f5 <sdp_match_uuid+0xc5>
			return -1;

		/* create 128-bit form of the search UUID */
		uuid128 = sdp_uuid_to_uuid128((uuid_t *)data);
     389:	e8 00 00 00 00       	callq  38e <sdp_match_uuid+0x5e>
	return n;
}

static inline sdp_list_t *sdp_list_find(sdp_list_t *list, void *u, sdp_comp_func_t f)
{
	for (; list; list = list->next)
     38e:	4d 85 ed             	test   %r13,%r13
     391:	48 89 c5             	mov    %rax,%rbp
     394:	74 4a                	je     3e0 <sdp_match_uuid+0xb0>
     396:	4c 89 eb             	mov    %r13,%rbx
     399:	eb 0d                	jmp    3a8 <sdp_match_uuid+0x78>
     39b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     3a0:	48 8b 1b             	mov    (%rbx),%rbx
     3a3:	48 85 db             	test   %rbx,%rbx
     3a6:	74 38                	je     3e0 <sdp_match_uuid+0xb0>
		if (f(list->data, u) == 0)
     3a8:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
     3ac:	48 89 ee             	mov    %rbp,%rsi
     3af:	e8 00 00 00 00       	callq  3b4 <sdp_match_uuid+0x84>
     3b4:	85 c0                	test   %eax,%eax
     3b6:	75 e8                	jne    3a0 <sdp_match_uuid+0x70>
		list = sdp_list_find(pattern, uuid128, sdp_uuid128_cmp);
		bt_free(uuid128);
     3b8:	48 89 ef             	mov    %rbp,%rdi
     3bb:	e8 00 00 00 00       	callq  3c0 <sdp_match_uuid+0x90>
	for (; search; search = search->next) {
     3c0:	4d 8b 24 24          	mov    (%r12),%r12
     3c4:	4d 85 e4             	test   %r12,%r12
     3c7:	74 3c                	je     405 <sdp_match_uuid+0xd5>
		void *data = search->data;
     3c9:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
		if (data == NULL)
     3ce:	48 85 ff             	test   %rdi,%rdi
     3d1:	74 22                	je     3f5 <sdp_match_uuid+0xc5>
		uuid128 = sdp_uuid_to_uuid128((uuid_t *)data);
     3d3:	e8 00 00 00 00       	callq  3d8 <sdp_match_uuid+0xa8>
     3d8:	4c 89 eb             	mov    %r13,%rbx
     3db:	48 89 c5             	mov    %rax,%rbp
     3de:	eb c8                	jmp    3a8 <sdp_match_uuid+0x78>
		bt_free(uuid128);
     3e0:	48 89 ef             	mov    %rbp,%rdi
     3e3:	e8 00 00 00 00       	callq  3e8 <sdp_match_uuid+0xb8>
		if (!list)
			return 0;
	}
	return 1;
}
     3e8:	48 83 c4 08          	add    $0x8,%rsp
			return 0;
     3ec:	31 c0                	xor    %eax,%eax
}
     3ee:	5b                   	pop    %rbx
     3ef:	5d                   	pop    %rbp
     3f0:	41 5c                	pop    %r12
     3f2:	41 5d                	pop    %r13
     3f4:	c3                   	retq   
     3f5:	48 83 c4 08          	add    $0x8,%rsp
		return -1;
     3f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
     3fe:	5b                   	pop    %rbx
     3ff:	5d                   	pop    %rbp
     400:	41 5c                	pop    %r12
     402:	41 5d                	pop    %r13
     404:	c3                   	retq   
     405:	48 83 c4 08          	add    $0x8,%rsp
	return 1;
     409:	b8 01 00 00 00       	mov    $0x1,%eax
}
     40e:	5b                   	pop    %rbx
     40f:	5d                   	pop    %rbp
     410:	41 5c                	pop    %r12
     412:	41 5d                	pop    %r13
     414:	c3                   	retq   
	int n = 0;
     415:	31 d2                	xor    %edx,%edx
     417:	e9 3f ff ff ff       	jmpq   35b <sdp_match_uuid+0x2b>
     41c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000420 <sdp_cstate_get.part.0>:
	len--;
     420:	48 83 ee 01          	sub    $0x1,%rsi
		return -EINVAL;
     424:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (len < sizeof(sdp_cont_state_t))
     429:	48 83 fe 07          	cmp    $0x7,%rsi
     42d:	76 2d                	jbe    45c <sdp_cstate_get.part.0+0x3c>
static int sdp_cstate_get(uint8_t *buffer, size_t len,
     42f:	55                   	push   %rbp
     430:	48 89 fd             	mov    %rdi,%rbp
	*cstate = malloc(sizeof(sdp_cont_state_t));
     433:	bf 08 00 00 00       	mov    $0x8,%edi
static int sdp_cstate_get(uint8_t *buffer, size_t len,
     438:	53                   	push   %rbx
     439:	48 89 d3             	mov    %rdx,%rbx
     43c:	48 83 ec 08          	sub    $0x8,%rsp
	*cstate = malloc(sizeof(sdp_cont_state_t));
     440:	e8 00 00 00 00       	callq  445 <sdp_cstate_get.part.0+0x25>
	if (!(*cstate))
     445:	48 85 c0             	test   %rax,%rax
	*cstate = malloc(sizeof(sdp_cont_state_t));
     448:	48 89 03             	mov    %rax,(%rbx)
	if (!(*cstate))
     44b:	74 13                	je     460 <sdp_cstate_get.part.0+0x40>
	memcpy(*cstate, buffer, sizeof(sdp_cont_state_t));
     44d:	48 8b 55 01          	mov    0x1(%rbp),%rdx
     451:	48 89 10             	mov    %rdx,(%rax)
	return 0;
     454:	31 c0                	xor    %eax,%eax
}
     456:	48 83 c4 08          	add    $0x8,%rsp
     45a:	5b                   	pop    %rbx
     45b:	5d                   	pop    %rbp
     45c:	f3 c3                	repz retq 
     45e:	66 90                	xchg   %ax,%ax
		return -ENOMEM;
     460:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
     465:	eb ef                	jmp    456 <sdp_cstate_get.part.0+0x36>
     467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
     46e:	00 00 

0000000000000470 <process_request>:
 * Top level request processor. Calls the appropriate processing
 * function based on request type. Handles service registration
 * client requests also.
 */
static void process_request(sdp_req_t *req)
{
     470:	41 57                	push   %r15
     472:	41 56                	push   %r14
     474:	41 55                	push   %r13
     476:	41 54                	push   %r12
     478:	55                   	push   %rbp
     479:	bd 04 00 00 00       	mov    $0x4,%ebp
     47e:	53                   	push   %rbx
     47f:	48 89 fb             	mov    %rdi,%rbx
     482:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
	sdp_pdu_hdr_t *reqhdr = (sdp_pdu_hdr_t *)req->buf;
     489:	4c 8b 7f 20          	mov    0x20(%rdi),%r15
	sdp_pdu_hdr_t *rsphdr;
	sdp_buf_t rsp;
	uint8_t *buf = malloc(USHRT_MAX);
     48d:	bf ff ff 00 00       	mov    $0xffff,%edi
     492:	e8 00 00 00 00       	callq  497 <process_request+0x27>
	int status = SDP_INVALID_SYNTAX;

	memset(buf, 0, USHRT_MAX);
     497:	31 f6                	xor    %esi,%esi
     499:	ba ff ff 00 00       	mov    $0xffff,%edx
     49e:	48 89 c7             	mov    %rax,%rdi
	uint8_t *buf = malloc(USHRT_MAX);
     4a1:	49 89 c6             	mov    %rax,%r14
	memset(buf, 0, USHRT_MAX);
     4a4:	e8 00 00 00 00       	callq  4a9 <process_request+0x39>
	rsp.data = buf + sizeof(sdp_pdu_hdr_t);
	rsp.data_size = 0;
	rsp.buf_size = USHRT_MAX - sizeof(sdp_pdu_hdr_t);
	rsphdr = (sdp_pdu_hdr_t *)buf;

	if (ntohs(reqhdr->plen) != req->len - sizeof(sdp_pdu_hdr_t)) {
     4a9:	48 63 53 28          	movslq 0x28(%rbx),%rdx
	rsp.data = buf + sizeof(sdp_pdu_hdr_t);
     4ad:	49 8d 46 05          	lea    0x5(%r14),%rax
	if (ntohs(reqhdr->plen) != req->len - sizeof(sdp_pdu_hdr_t)) {
     4b1:	41 0f b7 77 03       	movzwl 0x3(%r15),%esi
     4b6:	66 c1 ce 08          	ror    $0x8,%si
     4ba:	44 0f b7 e6          	movzwl %si,%r12d
	rsp.data = buf + sizeof(sdp_pdu_hdr_t);
     4be:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
	rsp.data_size = 0;
     4c3:	c7 44 24 68 00 00 00 	movl   $0x0,0x68(%rsp)
     4ca:	00 
	rsp.buf_size = USHRT_MAX - sizeof(sdp_pdu_hdr_t);
     4cb:	c7 44 24 6c fa ff 00 	movl   $0xfffa,0x6c(%rsp)
     4d2:	00 
	if (ntohs(reqhdr->plen) != req->len - sizeof(sdp_pdu_hdr_t)) {
     4d3:	48 8d 4a fb          	lea    -0x5(%rdx),%rcx
     4d7:	49 39 cc             	cmp    %rcx,%r12
     4da:	74 74                	je     550 <process_request+0xe0>
		break;
	}

send_rsp:
	if (status) {
		rsphdr->pdu_id = SDP_ERROR_RSP;
     4dc:	41 c6 06 01          	movb   $0x1,(%r14)
	put_unaligned(cpu_to_be16(val), (uint16_t *) ptr);
     4e0:	ba 07 00 00 00       	mov    $0x7,%edx
     4e5:	be 07 00 00 00       	mov    $0x7,%esi
     4ea:	66 c1 cd 08          	ror    $0x8,%bp
     4ee:	66 89 28             	mov    %bp,(%rax)
     4f1:	b8 02 00 00 00       	mov    $0x2,%eax
		rsp.data_size = sizeof(uint16_t);
	}

	SDPDBG("Sending rsp. status %d", status);

	rsphdr->tid  = reqhdr->tid;
     4f6:	41 0f b7 4f 01       	movzwl 0x1(%r15),%ecx
	/* point back to the real buffer start and set the real rsp length */
	rsp.data_size += sizeof(sdp_pdu_hdr_t);
	rsp.data = buf;

	/* stream the rsp PDU */
	if (send(req->sock, rsp.data, rsp.data_size, 0) < 0)
     4fb:	8b 7b 10             	mov    0x10(%rbx),%edi
	rsp.data_size += sizeof(sdp_pdu_hdr_t);
     4fe:	89 74 24 68          	mov    %esi,0x68(%rsp)
	if (send(req->sock, rsp.data, rsp.data_size, 0) < 0)
     502:	4c 89 f6             	mov    %r14,%rsi
	rsp.data = buf;
     505:	4c 89 74 24 60       	mov    %r14,0x60(%rsp)
	rsphdr->plen = htons(rsp.data_size);
     50a:	66 c1 c8 08          	ror    $0x8,%ax
     50e:	66 41 89 46 03       	mov    %ax,0x3(%r14)
	rsphdr->tid  = reqhdr->tid;
     513:	66 41 89 4e 01       	mov    %cx,0x1(%r14)
	if (send(req->sock, rsp.data, rsp.data_size, 0) < 0)
     518:	31 c9                	xor    %ecx,%ecx
     51a:	e8 00 00 00 00       	callq  51f <process_request+0xaf>
     51f:	48 85 c0             	test   %rax,%rax
     522:	0f 88 30 01 00 00    	js     658 <process_request+0x1e8>
		error("send: %s (%d)", strerror(errno), errno);

	SDPDBG("Bytes Sent : %d", rsp.data_size);

	free(rsp.data);
     528:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
     52d:	e8 00 00 00 00       	callq  532 <process_request+0xc2>
	free(req->buf);
     532:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
     536:	e8 00 00 00 00       	callq  53b <process_request+0xcb>
}
     53b:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
     542:	5b                   	pop    %rbx
     543:	5d                   	pop    %rbp
     544:	41 5c                	pop    %r12
     546:	41 5d                	pop    %r13
     548:	41 5e                	pop    %r14
     54a:	41 5f                	pop    %r15
     54c:	c3                   	retq   
     54d:	0f 1f 00             	nopl   (%rax)
	switch (reqhdr->pdu_id) {
     550:	41 0f b6 0f          	movzbl (%r15),%ecx
     554:	80 f9 06             	cmp    $0x6,%cl
     557:	0f 84 33 02 00 00    	je     790 <process_request+0x320>
     55d:	76 41                	jbe    5a0 <process_request+0x130>
     55f:	80 f9 77             	cmp    $0x77,%cl
     562:	0f 84 f8 01 00 00    	je     760 <process_request+0x2f0>
     568:	80 f9 79             	cmp    $0x79,%cl
     56b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     570:	0f 84 ba 01 00 00    	je     730 <process_request+0x2c0>
     576:	80 f9 75             	cmp    $0x75,%cl
     579:	0f 84 01 01 00 00    	je     680 <process_request+0x210>
		error("Unknown PDU ID : 0x%x received", reqhdr->pdu_id);
     57f:	31 c0                	xor    %eax,%eax
     581:	0f b6 f1             	movzbl %cl,%esi
     584:	bf 00 00 00 00       	mov    $0x0,%edi
     589:	e8 00 00 00 00       	callq  58e <process_request+0x11e>
		break;
     58e:	bd 03 00 00 00       	mov    $0x3,%ebp
     593:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
     598:	e9 3f ff ff ff       	jmpq   4dc <process_request+0x6c>
     59d:	0f 1f 00             	nopl   (%rax)
	switch (reqhdr->pdu_id) {
     5a0:	80 f9 02             	cmp    $0x2,%cl
     5a3:	0f 84 ff 00 00 00    	je     6a8 <process_request+0x238>
     5a9:	80 f9 04             	cmp    $0x4,%cl
     5ac:	75 d1                	jne    57f <process_request+0x10f>
	if (data_left < sizeof(uint32_t)) {
     5ae:	49 83 fc 03          	cmp    $0x3,%r12
	sdp_cont_state_t *cstate = NULL;
     5b2:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
     5b9:	00 00 
	sdp_list_t *seq = NULL;
     5bb:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
     5c2:	00 00 
	uint8_t dtd = 0;
     5c4:	c6 44 24 48 00       	movb   $0x0,0x48(%rsp)
	uint8_t *pdata = req->buf + sizeof(sdp_pdu_hdr_t);
     5c9:	48 8b 43 20          	mov    0x20(%rbx),%rax
	if (data_left < sizeof(uint32_t)) {
     5cd:	76 27                	jbe    5f6 <process_request+0x186>
     5cf:	8b 68 05             	mov    0x5(%rax),%ebp
	data_left -= sizeof(uint32_t);
     5d2:	48 8d 4a f7          	lea    -0x9(%rdx),%rcx
	if (data_left < sizeof(uint16_t)) {
     5d6:	48 83 f9 01          	cmp    $0x1,%rcx
     5da:	0f cd                	bswap  %ebp
     5dc:	76 18                	jbe    5f6 <process_request+0x186>
	data_left -= sizeof(uint16_t);
     5de:	4c 8d 6a f5          	lea    -0xb(%rdx),%r13
	return be16_to_cpu(get_unaligned((const uint16_t *) ptr));
     5e2:	44 0f b7 60 09       	movzwl 0x9(%rax),%r12d
     5e7:	66 41 c1 cc 08       	ror    $0x8,%r12w
	if (data_left < sizeof(sdp_pdu_hdr_t)) {
     5ec:	49 83 fd 04          	cmp    $0x4,%r13
     5f0:	0f 87 2a 03 00 00    	ja     920 <process_request+0x4b0>
     5f6:	31 ff                	xor    %edi,%edi
		status = SDP_INVALID_SYNTAX;
     5f8:	bd 03 00 00 00       	mov    $0x3,%ebp
	short cstate_size = 0;
     5fd:	45 31 e4             	xor    %r12d,%r12d
	free(cstate);
     600:	e8 00 00 00 00       	callq  605 <process_request+0x195>
	if (seq)
     605:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
     60a:	48 85 ff             	test   %rdi,%rdi
     60d:	74 0a                	je     619 <process_request+0x1a9>
		sdp_list_free(seq, free);
     60f:	be 00 00 00 00       	mov    $0x0,%esi
     614:	e8 00 00 00 00       	callq  619 <process_request+0x1a9>
	if (status)
     619:	85 ed                	test   %ebp,%ebp
     61b:	75 1c                	jne    639 <process_request+0x1c9>
	put_be16(buf->data_size - cstate_size, buf->data);
     61d:	8b 54 24 68          	mov    0x68(%rsp),%edx
	put_unaligned(cpu_to_be16(val), (uint16_t *) ptr);
     621:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
     626:	89 d0                	mov    %edx,%eax
	buf->data_size += sizeof(uint16_t);
     628:	83 c2 02             	add    $0x2,%edx
	put_be16(buf->data_size - cstate_size, buf->data);
     62b:	44 29 e0             	sub    %r12d,%eax
     62e:	66 c1 c8 08          	ror    $0x8,%ax
     632:	66 89 01             	mov    %ax,(%rcx)
	buf->data_size += sizeof(uint16_t);
     635:	89 54 24 68          	mov    %edx,0x68(%rsp)
		rsphdr->pdu_id = SDP_SVC_ATTR_RSP;
     639:	41 c6 06 05          	movb   $0x5,(%r14)
	if (status) {
     63d:	85 ed                	test   %ebp,%ebp
     63f:	0f 85 10 0a 00 00    	jne    1055 <process_request+0xbe5>
     645:	8b 74 24 68          	mov    0x68(%rsp),%esi
     649:	89 f0                	mov    %esi,%eax
     64b:	83 c6 05             	add    $0x5,%esi
     64e:	89 f2                	mov    %esi,%edx
     650:	e9 a1 fe ff ff       	jmpq   4f6 <process_request+0x86>
     655:	0f 1f 00             	nopl   (%rax)
		error("send: %s (%d)", strerror(errno), errno);
     658:	e8 00 00 00 00       	callq  65d <process_request+0x1ed>
     65d:	8b 28                	mov    (%rax),%ebp
     65f:	89 ef                	mov    %ebp,%edi
     661:	e8 00 00 00 00       	callq  666 <process_request+0x1f6>
     666:	89 ea                	mov    %ebp,%edx
     668:	48 89 c6             	mov    %rax,%rsi
     66b:	bf 00 00 00 00       	mov    $0x0,%edi
     670:	31 c0                	xor    %eax,%eax
     672:	e8 00 00 00 00       	callq  677 <process_request+0x207>
     677:	e9 ac fe ff ff       	jmpq   528 <process_request+0xb8>
     67c:	0f 1f 40 00          	nopl   0x0(%rax)
		if (req->local) {
     680:	8b 73 0c             	mov    0xc(%rbx),%esi
     683:	bd 03 00 00 00       	mov    $0x3,%ebp
     688:	85 f6                	test   %esi,%esi
     68a:	0f 84 4c fe ff ff    	je     4dc <process_request+0x6c>
			status = service_register_req(req, &rsp);
     690:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
     695:	48 89 df             	mov    %rbx,%rdi
     698:	e8 00 00 00 00       	callq  69d <process_request+0x22d>
			rsphdr->pdu_id = SDP_SVC_REGISTER_RSP;
     69d:	41 c6 06 76          	movb   $0x76,(%r14)
			status = service_register_req(req, &rsp);
     6a1:	89 c5                	mov    %eax,%ebp
     6a3:	eb 98                	jmp    63d <process_request+0x1cd>
     6a5:	0f 1f 00             	nopl   (%rax)
	uint8_t *pdata = req->buf + sizeof(sdp_pdu_hdr_t);
     6a8:	48 8b 43 20          	mov    0x20(%rbx),%rax
	scanned = extract_des(pdata, data_left, &pattern, &dtd, SDP_TYPE_UUID);
     6ac:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
     6b1:	48 8d 54 24 58       	lea    0x58(%rsp),%rdx
     6b6:	0f b7 f6             	movzwl %si,%esi
     6b9:	41 b8 fe 00 00 00    	mov    $0xfe,%r8d
	sdp_list_t *pattern = NULL;
     6bf:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
     6c6:	00 00 
	sdp_cont_state_t *cstate = NULL;
     6c8:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
     6cf:	00 00 
	uint8_t *pdata = req->buf + sizeof(sdp_pdu_hdr_t);
     6d1:	48 8d 68 05          	lea    0x5(%rax),%rbp
	scanned = extract_des(pdata, data_left, &pattern, &dtd, SDP_TYPE_UUID);
     6d5:	48 89 ef             	mov    %rbp,%rdi
     6d8:	e8 63 f9 ff ff       	callq  40 <extract_des>
	if (scanned == -1) {
     6dd:	83 f8 ff             	cmp    $0xffffffff,%eax
     6e0:	74 1a                	je     6fc <process_request+0x28c>
	plen = ntohs(((sdp_pdu_hdr_t *)(req->buf))->plen);
     6e2:	48 8b 53 20          	mov    0x20(%rbx),%rdx
	mlen = scanned + sizeof(uint16_t) + 1;
     6e6:	8d 48 03             	lea    0x3(%rax),%ecx
	plen = ntohs(((sdp_pdu_hdr_t *)(req->buf))->plen);
     6e9:	0f b7 52 03          	movzwl 0x3(%rdx),%edx
     6ed:	66 c1 ca 08          	ror    $0x8,%dx
     6f1:	0f b7 d2             	movzwl %dx,%edx
	if (plen < mlen || plen != mlen + *(uint8_t *)(pdata+sizeof(uint16_t))) {
     6f4:	39 ca                	cmp    %ecx,%edx
     6f6:	0f 8d 57 01 00 00    	jge    853 <process_request+0x3e3>
     6fc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
		status = SDP_INVALID_SYNTAX;
     701:	bd 03 00 00 00       	mov    $0x3,%ebp
	free(cstate);
     706:	e8 00 00 00 00       	callq  70b <process_request+0x29b>
	if (pattern)
     70b:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
     710:	48 85 ff             	test   %rdi,%rdi
     713:	74 0a                	je     71f <process_request+0x2af>
		sdp_list_free(pattern, free);
     715:	be 00 00 00 00       	mov    $0x0,%esi
     71a:	e8 00 00 00 00       	callq  71f <process_request+0x2af>
		rsphdr->pdu_id = SDP_SVC_SEARCH_RSP;
     71f:	41 c6 06 03          	movb   $0x3,(%r14)
		break;
     723:	e9 15 ff ff ff       	jmpq   63d <process_request+0x1cd>
     728:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     72f:	00 
		if (req->local) {
     730:	8b 53 0c             	mov    0xc(%rbx),%edx
     733:	bd 03 00 00 00       	mov    $0x3,%ebp
     738:	85 d2                	test   %edx,%edx
     73a:	0f 84 9c fd ff ff    	je     4dc <process_request+0x6c>
			status = service_remove_req(req, &rsp);
     740:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
     745:	48 89 df             	mov    %rbx,%rdi
     748:	e8 00 00 00 00       	callq  74d <process_request+0x2dd>
			rsphdr->pdu_id = SDP_SVC_REMOVE_RSP;
     74d:	41 c6 06 80          	movb   $0x80,(%r14)
			status = service_remove_req(req, &rsp);
     751:	89 c5                	mov    %eax,%ebp
     753:	e9 e5 fe ff ff       	jmpq   63d <process_request+0x1cd>
     758:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     75f:	00 
		if (req->local) {
     760:	8b 4b 0c             	mov    0xc(%rbx),%ecx
     763:	bd 03 00 00 00       	mov    $0x3,%ebp
     768:	85 c9                	test   %ecx,%ecx
     76a:	0f 84 6c fd ff ff    	je     4dc <process_request+0x6c>
			status = service_update_req(req, &rsp);
     770:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
     775:	48 89 df             	mov    %rbx,%rdi
     778:	e8 00 00 00 00       	callq  77d <process_request+0x30d>
			rsphdr->pdu_id = SDP_SVC_UPDATE_RSP;
     77d:	41 c6 06 78          	movb   $0x78,(%r14)
			status = service_update_req(req, &rsp);
     781:	89 c5                	mov    %eax,%ebp
     783:	e9 b5 fe ff ff       	jmpq   63d <process_request+0x1cd>
     788:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     78f:	00 
	pdata = req->buf + sizeof(sdp_pdu_hdr_t);
     790:	48 8b 43 20          	mov    0x20(%rbx),%rax
	scanned = extract_des(pdata, data_left, &pattern, &dtd, SDP_TYPE_UUID);
     794:	48 8d 4c 24 3f       	lea    0x3f(%rsp),%rcx
     799:	48 8d 54 24 48       	lea    0x48(%rsp),%rdx
     79e:	0f b7 f6             	movzwl %si,%esi
     7a1:	41 b8 fe 00 00 00    	mov    $0xfe,%r8d
	sdp_list_t *pattern = NULL, *seq = NULL, *svcList;
     7a7:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
     7ae:	00 00 
     7b0:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
     7b7:	00 00 
	sdp_cont_state_t *cstate = NULL;
     7b9:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
     7c0:	00 00 
	pdata = req->buf + sizeof(sdp_pdu_hdr_t);
     7c2:	48 8d 68 05          	lea    0x5(%rax),%rbp
	uint8_t dtd = 0;
     7c6:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
	tmpbuf.data = NULL;
     7cb:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
     7d2:	00 00 
	scanned = extract_des(pdata, data_left, &pattern, &dtd, SDP_TYPE_UUID);
     7d4:	48 89 ef             	mov    %rbp,%rdi
     7d7:	e8 64 f8 ff ff       	callq  40 <extract_des>
	if (scanned == -1) {
     7dc:	83 f8 ff             	cmp    $0xffffffff,%eax
	scanned = extract_des(pdata, data_left, &pattern, &dtd, SDP_TYPE_UUID);
     7df:	41 89 c5             	mov    %eax,%r13d
	if (scanned == -1) {
     7e2:	74 25                	je     809 <process_request+0x399>
	pdata += scanned;
     7e4:	48 98                	cltq   
	data_left -= scanned;
     7e6:	49 29 c4             	sub    %rax,%r12
	if (data_left < sizeof(uint16_t)) {
     7e9:	49 83 fc 01          	cmp    $0x1,%r12
     7ed:	76 1a                	jbe    809 <process_request+0x399>
	pdata += scanned;
     7ef:	48 01 e8             	add    %rbp,%rax
	data_left -= sizeof(uint16_t);
     7f2:	49 83 ec 02          	sub    $0x2,%r12
	return be16_to_cpu(get_unaligned((const uint16_t *) ptr));
     7f6:	44 0f b7 08          	movzwl (%rax),%r9d
     7fa:	66 41 c1 c9 08       	ror    $0x8,%r9w
	if (data_left < sizeof(sdp_pdu_hdr_t)) {
     7ff:	49 83 fc 04          	cmp    $0x4,%r12
     803:	0f 87 88 01 00 00    	ja     991 <process_request+0x521>
		status = SDP_INVALID_SYNTAX;
     809:	bd 03 00 00 00       	mov    $0x3,%ebp
	free(cstate);
     80e:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
     813:	e8 00 00 00 00       	callq  818 <process_request+0x3a8>
	free(tmpbuf.data);
     818:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
     81d:	e8 00 00 00 00       	callq  822 <process_request+0x3b2>
	if (pattern)
     822:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
     827:	48 85 ff             	test   %rdi,%rdi
     82a:	74 0a                	je     836 <process_request+0x3c6>
		sdp_list_free(pattern, free);
     82c:	be 00 00 00 00       	mov    $0x0,%esi
     831:	e8 00 00 00 00       	callq  836 <process_request+0x3c6>
	if (seq)
     836:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
     83b:	48 85 ff             	test   %rdi,%rdi
     83e:	74 0a                	je     84a <process_request+0x3da>
		sdp_list_free(seq, free);
     840:	be 00 00 00 00       	mov    $0x0,%esi
     845:	e8 00 00 00 00       	callq  84a <process_request+0x3da>
		rsphdr->pdu_id = SDP_SVC_SEARCH_ATTR_RSP;
     84a:	41 c6 06 07          	movb   $0x7,(%r14)
		break;
     84e:	e9 ea fd ff ff       	jmpq   63d <process_request+0x1cd>
	pdata += scanned;
     853:	48 98                	cltq   
     855:	48 01 c5             	add    %rax,%rbp
	if (plen < mlen || plen != mlen + *(uint8_t *)(pdata+sizeof(uint16_t))) {
     858:	0f b6 75 02          	movzbl 0x2(%rbp),%esi
     85c:	40 0f b6 fe          	movzbl %sil,%edi
     860:	01 f9                	add    %edi,%ecx
     862:	39 ca                	cmp    %ecx,%edx
     864:	0f 85 92 fe ff ff    	jne    6fc <process_request+0x28c>
	data_left -= scanned;
     86a:	49 29 c4             	sub    %rax,%r12
	if (data_left < sizeof(uint16_t)) {
     86d:	49 83 fc 01          	cmp    $0x1,%r12
     871:	0f 86 85 fe ff ff    	jbe    6fc <process_request+0x28c>
     877:	0f b7 45 00          	movzwl 0x0(%rbp),%eax
     87b:	66 c1 c8 08          	ror    $0x8,%ax
	if (cStateSize == 0) {
     87f:	40 84 f6             	test   %sil,%sil
     882:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
     887:	0f 85 ea 02 00 00    	jne    b77 <process_request+0x707>
		*cstate = NULL;
     88d:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
     894:	00 00 
	mtu = req->mtu - sizeof(sdp_pdu_hdr_t) - sizeof(uint16_t) - sizeof(uint16_t) - SDP_CONT_STATE_SIZE;
     896:	8b 43 14             	mov    0x14(%rbx),%eax
	actual = MIN(expected, mtu >> 2);
     899:	0f b7 54 24 26       	movzwl 0x26(%rsp),%edx
	pdata = buf->data;
     89e:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
	if (cstate == NULL) {
     8a3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	mtu = req->mtu - sizeof(sdp_pdu_hdr_t) - sizeof(uint16_t) - sizeof(uint16_t) - SDP_CONT_STATE_SIZE;
     8a8:	83 e8 12             	sub    $0x12,%eax
	actual = MIN(expected, mtu >> 2);
     8ab:	c1 f8 02             	sar    $0x2,%eax
	pdata += sizeof(uint16_t);
     8ae:	48 8d 4d 04          	lea    0x4(%rbp),%rcx
	put_unaligned(cpu_to_be16(val), (uint16_t *) ptr);
     8b2:	66 c7 45 00 00 00    	movw   $0x0,0x0(%rbp)
	actual = MIN(expected, mtu >> 2);
     8b8:	39 c2                	cmp    %eax,%edx
     8ba:	0f 4e c2             	cmovle %edx,%eax
	pdata += sizeof(uint16_t);
     8bd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
	actual = MIN(expected, mtu >> 2);
     8c2:	89 44 24 14          	mov    %eax,0x14(%rsp)
	buf->data_size += sizeof(uint16_t);
     8c6:	8b 44 24 68          	mov    0x68(%rsp),%eax
     8ca:	66 c7 45 02 00 00    	movw   $0x0,0x2(%rbp)
	buf->data_size += sizeof(uint16_t);
     8d0:	83 c0 04             	add    $0x4,%eax
     8d3:	89 44 24 68          	mov    %eax,0x68(%rsp)
	uint32_t cStateId = 0;
     8d7:	31 c0                	xor    %eax,%eax
	if (cstate == NULL) {
     8d9:	48 85 ff             	test   %rdi,%rdi
     8dc:	0f 84 77 06 00 00    	je     f59 <process_request+0xae9>
	for (p = cstates; p; p = p->next)
     8e2:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 8e9 <process_request+0x479>
     8e9:	48 85 d2             	test   %rdx,%rdx
     8ec:	74 24                	je     912 <process_request+0x4a2>
		if (p->timestamp == cstate->timestamp)
     8ee:	8b 0f                	mov    (%rdi),%ecx
     8f0:	39 4a 08             	cmp    %ecx,0x8(%rdx)
     8f3:	75 14                	jne    909 <process_request+0x499>
     8f5:	e9 f5 02 00 00       	jmpq   bef <process_request+0x77f>
     8fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
     900:	39 4a 08             	cmp    %ecx,0x8(%rdx)
     903:	0f 84 e6 02 00 00    	je     bef <process_request+0x77f>
	for (p = cstates; p; p = p->next)
     909:	48 8b 12             	mov    (%rdx),%rdx
     90c:	48 85 d2             	test   %rdx,%rdx
     90f:	90                   	nop
     910:	75 ee                	jne    900 <process_request+0x490>
				status = SDP_INVALID_CSTATE;
     912:	bd 05 00 00 00       	mov    $0x5,%ebp
     917:	e9 ea fd ff ff       	jmpq   706 <process_request+0x296>
     91c:	0f 1f 40 00          	nopl   0x0(%rax)
	pdata += sizeof(uint16_t);
     920:	48 83 c0 0b          	add    $0xb,%rax
	scanned = extract_des(pdata, data_left, &seq, &dtd, SDP_TYPE_ATTRID);
     924:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
     929:	48 8d 54 24 70       	lea    0x70(%rsp),%rdx
     92e:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
     934:	44 89 ee             	mov    %r13d,%esi
     937:	48 89 c7             	mov    %rax,%rdi
	pdata += sizeof(uint16_t);
     93a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	scanned = extract_des(pdata, data_left, &seq, &dtd, SDP_TYPE_ATTRID);
     93f:	e8 fc f6 ff ff       	callq  40 <extract_des>
	if (scanned == -1) {
     944:	83 f8 ff             	cmp    $0xffffffff,%eax
     947:	0f 84 7a 01 00 00    	je     ac7 <process_request+0x657>
	plen = ntohs(((sdp_pdu_hdr_t *)(req->buf))->plen);
     94d:	48 8b 53 20          	mov    0x20(%rbx),%rdx
	mlen = scanned + sizeof(uint32_t) + sizeof(uint16_t) + 1;
     951:	8d 48 07             	lea    0x7(%rax),%ecx
	plen = ntohs(((sdp_pdu_hdr_t *)(req->buf))->plen);
     954:	0f b7 52 03          	movzwl 0x3(%rdx),%edx
     958:	66 c1 ca 08          	ror    $0x8,%dx
     95c:	0f b7 d2             	movzwl %dx,%edx
	if (plen < mlen || plen != mlen + *(uint8_t *)pdata) {
     95f:	39 ca                	cmp    %ecx,%edx
     961:	7c 1c                	jl     97f <process_request+0x50f>
	pdata += scanned;
     963:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
     968:	48 98                	cltq   
     96a:	48 01 c7             	add    %rax,%rdi
	if (plen < mlen || plen != mlen + *(uint8_t *)pdata) {
     96d:	0f b6 37             	movzbl (%rdi),%esi
     970:	44 0f b6 c6          	movzbl %sil,%r8d
     974:	44 01 c1             	add    %r8d,%ecx
     977:	39 ca                	cmp    %ecx,%edx
     979:	0f 84 5a 01 00 00    	je     ad9 <process_request+0x669>
     97f:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
		status = SDP_INVALID_PDU_SIZE;
     984:	bd 04 00 00 00       	mov    $0x4,%ebp
	short cstate_size = 0;
     989:	45 31 e4             	xor    %r12d,%r12d
     98c:	e9 6f fc ff ff       	jmpq   600 <process_request+0x190>
	pdata += sizeof(uint16_t);
     991:	48 83 c0 02          	add    $0x2,%rax
	scanned = extract_des(pdata, data_left, &seq, &dtd, SDP_TYPE_ATTRID);
     995:	48 8d 4c 24 3f       	lea    0x3f(%rsp),%rcx
     99a:	48 8d 54 24 50       	lea    0x50(%rsp),%rdx
     99f:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
     9a5:	44 89 e6             	mov    %r12d,%esi
     9a8:	48 89 c7             	mov    %rax,%rdi
     9ab:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
	pdata += sizeof(uint16_t);
     9b0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	scanned = extract_des(pdata, data_left, &seq, &dtd, SDP_TYPE_ATTRID);
     9b5:	e8 86 f6 ff ff       	callq  40 <extract_des>
	if (scanned == -1) {
     9ba:	83 f8 ff             	cmp    $0xffffffff,%eax
     9bd:	0f 84 46 fe ff ff    	je     809 <process_request+0x399>
	plen = ntohs(((sdp_pdu_hdr_t *)(req->buf))->plen);
     9c3:	48 8b 53 20          	mov    0x20(%rbx),%rdx
	totscanned += scanned + sizeof(uint16_t) + 1;
     9c7:	41 8d 74 05 03       	lea    0x3(%r13,%rax,1),%esi
		status = SDP_INVALID_PDU_SIZE;
     9cc:	bd 04 00 00 00       	mov    $0x4,%ebp
	if (plen < totscanned || plen != totscanned + *(uint8_t *)pdata) {
     9d1:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
	plen = ntohs(((sdp_pdu_hdr_t *)(req->buf))->plen);
     9d6:	0f b7 52 03          	movzwl 0x3(%rdx),%edx
     9da:	66 c1 ca 08          	ror    $0x8,%dx
     9de:	0f b7 d2             	movzwl %dx,%edx
	if (plen < totscanned || plen != totscanned + *(uint8_t *)pdata) {
     9e1:	39 d6                	cmp    %edx,%esi
     9e3:	0f 8f 25 fe ff ff    	jg     80e <process_request+0x39e>
	pdata += scanned;
     9e9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
     9ee:	48 98                	cltq   
     9f0:	48 01 c7             	add    %rax,%rdi
	if (plen < totscanned || plen != totscanned + *(uint8_t *)pdata) {
     9f3:	0f b6 0f             	movzbl (%rdi),%ecx
     9f6:	44 0f b6 c1          	movzbl %cl,%r8d
     9fa:	44 01 c6             	add    %r8d,%esi
     9fd:	39 f2                	cmp    %esi,%edx
     9ff:	0f 85 09 fe ff ff    	jne    80e <process_request+0x39e>
	if (cStateSize == 0) {
     a05:	84 c9                	test   %cl,%cl
     a07:	0f 85 68 06 00 00    	jne    1075 <process_request+0xc05>
		*cstate = NULL;
     a0d:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
     a14:	00 00 
     a16:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
	svcList = sdp_get_record_list();
     a1b:	e8 00 00 00 00       	callq  a20 <process_request+0x5b0>
	tmpbuf.data = malloc(USHRT_MAX);
     a20:	bf ff ff 00 00       	mov    $0xffff,%edi
	svcList = sdp_get_record_list();
     a25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	tmpbuf.data = malloc(USHRT_MAX);
     a2a:	e8 00 00 00 00       	callq  a2f <process_request+0x5bf>
	memset(tmpbuf.data, 0, USHRT_MAX);
     a2f:	31 f6                	xor    %esi,%esi
     a31:	48 89 c7             	mov    %rax,%rdi
     a34:	ba ff ff 00 00       	mov    $0xffff,%edx
	tmpbuf.data = malloc(USHRT_MAX);
     a39:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	tmpbuf.data_size = 0;
     a3e:	c7 44 24 78 00 00 00 	movl   $0x0,0x78(%rsp)
     a45:	00 
	tmpbuf.buf_size = USHRT_MAX;
     a46:	c7 44 24 7c ff ff 00 	movl   $0xffff,0x7c(%rsp)
     a4d:	00 
	memset(tmpbuf.data, 0, USHRT_MAX);
     a4e:	e8 00 00 00 00       	callq  a53 <process_request+0x5e3>
	max = MIN(max, req->mtu - sizeof(sdp_pdu_hdr_t) - SDP_CONT_STATE_SIZE - sizeof(uint16_t));
     a53:	48 63 43 14          	movslq 0x14(%rbx),%rax
     a57:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
	for (p = cstates; p; p = p->next)
     a5c:	48 8b 2d 00 00 00 00 	mov    0x0(%rip),%rbp        # a63 <process_request+0x5f3>
	max = MIN(max, req->mtu - sizeof(sdp_pdu_hdr_t) - SDP_CONT_STATE_SIZE - sizeof(uint16_t));
     a63:	45 0f b7 e1          	movzwl %r9w,%r12d
     a67:	48 83 e8 10          	sub    $0x10,%rax
     a6b:	49 39 c4             	cmp    %rax,%r12
     a6e:	4c 0f 47 e0          	cmova  %rax,%r12
	buf->data += sizeof(uint16_t);
     a72:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
	buf->buf_size -= sizeof(uint16_t);
     a77:	83 6c 24 6c 02       	subl   $0x2,0x6c(%rsp)
	buf->data += sizeof(uint16_t);
     a7c:	48 8d 78 02          	lea    0x2(%rax),%rdi
	if (cstate == NULL) {
     a80:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	buf->data += sizeof(uint16_t);
     a85:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
	if (cstate == NULL) {
     a8a:	48 85 c0             	test   %rax,%rax
     a8d:	75 14                	jne    aa3 <process_request+0x633>
     a8f:	e9 26 03 00 00       	jmpq   dba <process_request+0x94a>
		if (p->timestamp == cstate->timestamp)
     a94:	8b 08                	mov    (%rax),%ecx
     a96:	39 4d 08             	cmp    %ecx,0x8(%rbp)
     a99:	0f 84 42 02 00 00    	je     ce1 <process_request+0x871>
	for (p = cstates; p; p = p->next)
     a9f:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
     aa3:	48 85 ed             	test   %rbp,%rbp
     aa6:	75 ec                	jne    a94 <process_request+0x624>
	short cstate_size = 0;
     aa8:	45 31 e4             	xor    %r12d,%r12d
			status = SDP_INVALID_CSTATE;
     aab:	40 b5 05             	mov    $0x5,%bpl
     aae:	e9 44 02 00 00       	jmpq   cf7 <process_request+0x887>
	data_left -= scanned;
     ab3:	4c 89 ee             	mov    %r13,%rsi
     ab6:	48 8d 54 24 58       	lea    0x58(%rsp),%rdx
     abb:	48 29 c6             	sub    %rax,%rsi
     abe:	e8 5d f9 ff ff       	callq  420 <sdp_cstate_get.part.0>
	if (sdp_cstate_get(pdata, data_left, &cstate) < 0) {
     ac3:	85 c0                	test   %eax,%eax
     ac5:	79 20                	jns    ae7 <process_request+0x677>
     ac7:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
		status = SDP_INVALID_SYNTAX;
     acc:	bd 03 00 00 00       	mov    $0x3,%ebp
	short cstate_size = 0;
     ad1:	45 31 e4             	xor    %r12d,%r12d
     ad4:	e9 27 fb ff ff       	jmpq   600 <process_request+0x190>
	if (cStateSize == 0) {
     ad9:	40 84 f6             	test   %sil,%sil
     adc:	75 d5                	jne    ab3 <process_request+0x643>
		*cstate = NULL;
     ade:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
     ae5:	00 00 
	if (max_rsp_size < 0x0007) {
     ae7:	66 41 83 fc 06       	cmp    $0x6,%r12w
     aec:	76 d9                	jbe    ac7 <process_request+0x657>
	max_rsp_size = MIN(max_rsp_size, req->mtu - sizeof(sdp_pdu_hdr_t) -
     aee:	48 63 43 14          	movslq 0x14(%rbx),%rax
     af2:	45 0f b7 e4          	movzwl %r12w,%r12d
     af6:	48 83 e8 14          	sub    $0x14,%rax
     afa:	49 39 c4             	cmp    %rax,%r12
     afd:	4c 0f 47 e0          	cmova  %rax,%r12
	buf->data += sizeof(uint16_t);
     b01:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
	buf->buf_size -= sizeof(uint16_t);
     b06:	83 6c 24 6c 02       	subl   $0x2,0x6c(%rsp)
	buf->data += sizeof(uint16_t);
     b0b:	48 8d 78 02          	lea    0x2(%rax),%rdi
	if (cstate) {
     b0f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	buf->data += sizeof(uint16_t);
     b14:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
	if (cstate) {
     b19:	48 85 c0             	test   %rax,%rax
     b1c:	0f 84 96 03 00 00    	je     eb8 <process_request+0xa48>
	for (p = cstates; p; p = p->next)
     b22:	48 8b 2d 00 00 00 00 	mov    0x0(%rip),%rbp        # b29 <process_request+0x6b9>
     b29:	48 85 ed             	test   %rbp,%rbp
     b2c:	74 20                	je     b4e <process_request+0x6de>
		if (p->timestamp == cstate->timestamp)
     b2e:	8b 10                	mov    (%rax),%edx
     b30:	39 55 08             	cmp    %edx,0x8(%rbp)
     b33:	75 10                	jne    b45 <process_request+0x6d5>
     b35:	eb 60                	jmp    b97 <process_request+0x727>
     b37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
     b3e:	00 00 
     b40:	39 55 08             	cmp    %edx,0x8(%rbp)
     b43:	74 52                	je     b97 <process_request+0x727>
	for (p = cstates; p; p = p->next)
     b45:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
     b49:	48 85 ed             	test   %rbp,%rbp
     b4c:	75 f2                	jne    b40 <process_request+0x6d0>
			error("NULL cache buffer and non-NULL continuation state");
     b4e:	bf 00 00 00 00       	mov    $0x0,%edi
     b53:	31 c0                	xor    %eax,%eax
			status = SDP_INVALID_CSTATE;
     b55:	bd 05 00 00 00       	mov    $0x5,%ebp
	short cstate_size = 0;
     b5a:	45 31 e4             	xor    %r12d,%r12d
			error("NULL cache buffer and non-NULL continuation state");
     b5d:	e8 00 00 00 00       	callq  b62 <process_request+0x6f2>
	buf->data -= sizeof(uint16_t);
     b62:	48 83 6c 24 60 02    	subq   $0x2,0x60(%rsp)
	buf->buf_size += sizeof(uint16_t);
     b68:	83 44 24 6c 02       	addl   $0x2,0x6c(%rsp)
     b6d:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
     b72:	e9 89 fa ff ff       	jmpq   600 <process_request+0x190>
	data_left -= sizeof(uint16_t);
     b77:	49 8d 74 24 fe       	lea    -0x2(%r12),%rsi
	pdata += sizeof(uint16_t);
     b7c:	48 8d 7d 02          	lea    0x2(%rbp),%rdi
     b80:	48 8d 54 24 70       	lea    0x70(%rsp),%rdx
     b85:	e8 96 f8 ff ff       	callq  420 <sdp_cstate_get.part.0>
	if (sdp_cstate_get(pdata, data_left, &cstate) < 0) {
     b8a:	85 c0                	test   %eax,%eax
     b8c:	0f 88 6a fb ff ff    	js     6fc <process_request+0x28c>
     b92:	e9 ff fc ff ff       	jmpq   896 <process_request+0x426>
			short sent = MIN(max_rsp_size, pCache->data_size - cstate->cStateValue.maxBytesSent);
     b97:	0f b7 70 04          	movzwl 0x4(%rax),%esi
     b9b:	8b 45 18             	mov    0x18(%rbp),%eax
     b9e:	0f b7 d6             	movzwl %si,%edx
     ba1:	29 d0                	sub    %edx,%eax
     ba3:	41 39 c4             	cmp    %eax,%r12d
     ba6:	44 0f 47 e0          	cmova  %eax,%r12d
			memcpy(buf->data, pResponse + cstate->cStateValue.maxBytesSent, sent);
     baa:	48 03 75 10          	add    0x10(%rbp),%rsi
     bae:	49 0f bf d4          	movswq %r12w,%rdx
     bb2:	e8 00 00 00 00       	callq  bb7 <process_request+0x747>
			cstate->cStateValue.maxBytesSent += sent;
     bb7:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
			buf->data_size += sent;
     bbc:	41 0f bf c4          	movswl %r12w,%eax
     bc0:	01 44 24 68          	add    %eax,0x68(%rsp)
			cstate->cStateValue.maxBytesSent += sent;
     bc4:	44 03 66 04          	add    0x4(%rsi),%r12d
     bc8:	66 44 89 66 04       	mov    %r12w,0x4(%rsi)
			if (cstate->cStateValue.maxBytesSent == pCache->data_size)
     bcd:	45 0f b7 e4          	movzwl %r12w,%r12d
     bd1:	44 3b 65 18          	cmp    0x18(%rbp),%r12d
     bd5:	0f 84 84 04 00 00    	je     105f <process_request+0xbef>
				cstate_size = sdp_set_cstate_pdu(buf, cstate);
     bdb:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
	int status = 0, plen, mlen;
     be0:	31 ed                	xor    %ebp,%ebp
				cstate_size = sdp_set_cstate_pdu(buf, cstate);
     be2:	e8 19 f4 ff ff       	callq  0 <sdp_set_cstate_pdu>
     be7:	41 89 c4             	mov    %eax,%r12d
     bea:	e9 73 ff ff ff       	jmpq   b62 <process_request+0x6f2>
				pCacheBuffer = pCache->data;
     bef:	48 8b 72 10          	mov    0x10(%rdx),%rsi
				lastIndex = cstate->cStateValue.lastIndexSent;
     bf3:	44 0f b7 5f 04       	movzwl 0x4(%rdi),%r11d
	return be16_to_cpu(get_unaligned((const uint16_t *) ptr));
     bf8:	0f b7 0e             	movzwl (%rsi),%ecx
			for (i = lastIndex; (i - lastIndex) < actual && i < rsp_count; i++) {
     bfb:	41 0f bf d3          	movswl %r11w,%edx
     bff:	41 89 cc             	mov    %ecx,%r12d
     c02:	0f b7 4c 24 14       	movzwl 0x14(%rsp),%ecx
     c07:	66 41 c1 cc 08       	ror    $0x8,%r12w
     c0c:	85 c9                	test   %ecx,%ecx
     c0e:	0f 84 a3 00 00 00    	je     cb7 <process_request+0x847>
     c14:	45 0f b7 ec          	movzwl %r12w,%r13d
     c18:	44 39 ea             	cmp    %r13d,%edx
     c1b:	0f 8d 96 00 00 00    	jge    cb7 <process_request+0x847>
     c21:	49 0f bf fb          	movswq %r11w,%rdi
     c25:	01 d1                	add    %edx,%ecx
     c27:	48 8d 7c be 04       	lea    0x4(%rsi,%rdi,4),%rdi
		pdata = pCurrentRecordCount + sizeof(uint16_t);
     c2c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
     c31:	eb 0e                	jmp    c41 <process_request+0x7d1>
     c33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     c38:	48 83 c7 04          	add    $0x4,%rdi
			for (i = lastIndex; (i - lastIndex) < actual && i < rsp_count; i++) {
     c3c:	44 39 ea             	cmp    %r13d,%edx
     c3f:	7d 1a                	jge    c5b <process_request+0x7eb>
				memcpy(pdata, pCacheBuffer + i * sizeof(uint32_t), sizeof(uint32_t));
     c41:	44 8b 07             	mov    (%rdi),%r8d
				pdata += sizeof(uint32_t);
     c44:	48 83 c6 04          	add    $0x4,%rsi
			for (i = lastIndex; (i - lastIndex) < actual && i < rsp_count; i++) {
     c48:	83 c2 01             	add    $0x1,%edx
				memcpy(pdata, pCacheBuffer + i * sizeof(uint32_t), sizeof(uint32_t));
     c4b:	44 89 46 fc          	mov    %r8d,-0x4(%rsi)
     c4f:	41 89 f0             	mov    %esi,%r8d
     c52:	44 2b 44 24 08       	sub    0x8(%rsp),%r8d
			for (i = lastIndex; (i - lastIndex) < actual && i < rsp_count; i++) {
     c57:	39 ca                	cmp    %ecx,%edx
     c59:	75 dd                	jne    c38 <process_request+0x7c8>
     c5b:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
		buf->data_size += handleSize;
     c60:	44 01 44 24 68       	add    %r8d,0x68(%rsp)
	put_unaligned(cpu_to_be16(val), (uint16_t *) ptr);
     c65:	44 89 e6             	mov    %r12d,%esi
     c68:	41 0f b7 cc          	movzwl %r12w,%ecx
     c6c:	66 c1 ce 08          	ror    $0x8,%si
     c70:	66 89 75 00          	mov    %si,0x0(%rbp)
		put_be16(i - lastIndex, pCurrentRecordCount);
     c74:	89 d6                	mov    %edx,%esi
     c76:	89 d7                	mov    %edx,%edi
     c78:	44 29 de             	sub    %r11d,%esi
     c7b:	66 c1 ce 08          	ror    $0x8,%si
		if (i == rsp_count) {
     c7f:	39 d1                	cmp    %edx,%ecx
     c81:	66 89 75 02          	mov    %si,0x2(%rbp)
     c85:	74 44                	je     ccb <process_request+0x85b>
			if (cstate)
     c87:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
     c8c:	48 85 d2             	test   %rdx,%rdx
     c8f:	74 2b                	je     cbc <process_request+0x84c>
				memcpy(&newState, cstate, sizeof(sdp_cont_state_t));
     c91:	48 8b 02             	mov    (%rdx),%rax
     c94:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
			sdp_set_cstate_pdu(buf, &newState);
     c99:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
			newState.cStateValue.lastIndexSent = i;
     c9e:	66 89 7c 24 54       	mov    %di,0x54(%rsp)
			sdp_set_cstate_pdu(buf, &newState);
     ca3:	4c 89 ef             	mov    %r13,%rdi
	int status = 0, i, plen, mlen, mtu, scanned;
     ca6:	31 ed                	xor    %ebp,%ebp
			sdp_set_cstate_pdu(buf, &newState);
     ca8:	e8 53 f3 ff ff       	callq  0 <sdp_set_cstate_pdu>
     cad:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
     cb2:	e9 4f fa ff ff       	jmpq   706 <process_request+0x296>
			handleSize = 0;
     cb7:	45 31 c0             	xor    %r8d,%r8d
     cba:	eb 9f                	jmp    c5b <process_request+0x7eb>
				memset(&newState, 0, sizeof(sdp_cont_state_t));
     cbc:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
     cc3:	00 00 
				newState.timestamp = cStateId;
     cc5:	89 44 24 50          	mov    %eax,0x50(%rsp)
     cc9:	eb ce                	jmp    c99 <process_request+0x829>
			sdp_set_cstate_pdu(buf, NULL);
     ccb:	4c 89 ef             	mov    %r13,%rdi
     cce:	31 f6                	xor    %esi,%esi
	int status = 0, i, plen, mlen, mtu, scanned;
     cd0:	31 ed                	xor    %ebp,%ebp
			sdp_set_cstate_pdu(buf, NULL);
     cd2:	e8 29 f3 ff ff       	callq  0 <sdp_set_cstate_pdu>
     cd7:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
     cdc:	e9 25 fa ff ff       	jmpq   706 <process_request+0x296>
		if (pCache && cstate->cStateValue.maxBytesSent < pCache->data_size) {
     ce1:	0f b7 70 04          	movzwl 0x4(%rax),%esi
     ce5:	8b 45 18             	mov    0x18(%rbp),%eax
     ce8:	0f b7 d6             	movzwl %si,%edx
     ceb:	39 c2                	cmp    %eax,%edx
     ced:	72 6f                	jb     d5e <process_request+0x8ee>
	short cstate_size = 0;
     cef:	45 31 e4             	xor    %r12d,%r12d
			status = SDP_INVALID_CSTATE;
     cf2:	bd 05 00 00 00       	mov    $0x5,%ebp
	if (!rsp_count && !cstate) {
     cf7:	48 83 7c 24 58 00    	cmpq   $0x0,0x58(%rsp)
     cfd:	75 27                	jne    d26 <process_request+0x8b6>
		sdp_append_to_buf(buf, tmpbuf.data, tmpbuf.data_size);
     cff:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
     d04:	8b 54 24 78          	mov    0x78(%rsp),%edx
     d08:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
		buf->data_size = 0;
     d0d:	c7 44 24 68 00 00 00 	movl   $0x0,0x68(%rsp)
     d14:	00 
		sdp_append_to_buf(buf, tmpbuf.data, tmpbuf.data_size);
     d15:	e8 00 00 00 00       	callq  d1a <process_request+0x8aa>
		sdp_set_cstate_pdu(buf, NULL);
     d1a:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
     d1f:	31 f6                	xor    %esi,%esi
     d21:	e8 da f2 ff ff       	callq  0 <sdp_set_cstate_pdu>
	buf->data -= sizeof(uint16_t);
     d26:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
	buf->buf_size += sizeof(uint16_t);
     d2b:	83 44 24 6c 02       	addl   $0x2,0x6c(%rsp)
	if (!status) {
     d30:	85 ed                	test   %ebp,%ebp
	buf->data -= sizeof(uint16_t);
     d32:	48 8d 41 fe          	lea    -0x2(%rcx),%rax
     d36:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
	if (!status) {
     d3b:	0f 85 cd fa ff ff    	jne    80e <process_request+0x39e>
		put_be16(buf->data_size - cstate_size, buf->data);
     d41:	8b 54 24 68          	mov    0x68(%rsp),%edx
     d45:	89 d0                	mov    %edx,%eax
		buf->data_size += sizeof(uint16_t);
     d47:	83 c2 02             	add    $0x2,%edx
		put_be16(buf->data_size - cstate_size, buf->data);
     d4a:	44 29 e0             	sub    %r12d,%eax
     d4d:	66 c1 c8 08          	ror    $0x8,%ax
     d51:	66 89 41 fe          	mov    %ax,-0x2(%rcx)
		buf->data_size += sizeof(uint16_t);
     d55:	89 54 24 68          	mov    %edx,0x68(%rsp)
     d59:	e9 b0 fa ff ff       	jmpq   80e <process_request+0x39e>
			uint16_t sent = MIN(max, pCache->data_size - cstate->cStateValue.maxBytesSent);
     d5e:	29 d0                	sub    %edx,%eax
     d60:	41 39 c4             	cmp    %eax,%r12d
     d63:	44 0f 47 e0          	cmova  %eax,%r12d
			memcpy(buf->data, pResponse + cstate->cStateValue.maxBytesSent, sent);
     d67:	48 03 75 10          	add    0x10(%rbp),%rsi
     d6b:	44 89 e2             	mov    %r12d,%edx
     d6e:	e8 00 00 00 00       	callq  d73 <process_request+0x903>
			cstate->cStateValue.maxBytesSent += sent;
     d73:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
			buf->data_size += sent;
     d78:	44 01 64 24 68       	add    %r12d,0x68(%rsp)
			cstate->cStateValue.maxBytesSent += sent;
     d7d:	44 03 66 04          	add    0x4(%rsi),%r12d
     d81:	66 44 89 66 04       	mov    %r12w,0x4(%rsi)
			if (cstate->cStateValue.maxBytesSent == pCache->data_size)
     d86:	45 0f b7 e4          	movzwl %r12w,%r12d
     d8a:	44 3b 65 18          	cmp    0x18(%rbp),%r12d
     d8e:	74 14                	je     da4 <process_request+0x934>
				cstate_size = sdp_set_cstate_pdu(buf, cstate);
     d90:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
	int status = 0, plen, totscanned;
     d95:	31 ed                	xor    %ebp,%ebp
				cstate_size = sdp_set_cstate_pdu(buf, cstate);
     d97:	e8 64 f2 ff ff       	callq  0 <sdp_set_cstate_pdu>
     d9c:	41 89 c4             	mov    %eax,%r12d
     d9f:	e9 53 ff ff ff       	jmpq   cf7 <process_request+0x887>
				cstate_size = sdp_set_cstate_pdu(buf, NULL);
     da4:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
     da9:	31 f6                	xor    %esi,%esi
	int status = 0, plen, totscanned;
     dab:	31 ed                	xor    %ebp,%ebp
				cstate_size = sdp_set_cstate_pdu(buf, NULL);
     dad:	e8 4e f2 ff ff       	callq  0 <sdp_set_cstate_pdu>
     db2:	41 89 c4             	mov    %eax,%r12d
     db5:	e9 3d ff ff ff       	jmpq   cf7 <process_request+0x887>
	if (cstate == NULL) {
     dba:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
     dc1:	00 
     dc2:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
     dc7:	e9 93 00 00 00       	jmpq   e5f <process_request+0x9ef>
			sdp_record_t *rec = p->data;
     dcc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
			if (sdp_match_uuid(pattern, rec->pattern) > 0 &&
     dd1:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
			sdp_record_t *rec = p->data;
     dd6:	48 8b 68 08          	mov    0x8(%rax),%rbp
			if (sdp_match_uuid(pattern, rec->pattern) > 0 &&
     dda:	48 8b 75 08          	mov    0x8(%rbp),%rsi
     dde:	e8 4d f5 ff ff       	callq  330 <sdp_match_uuid>
     de3:	85 c0                	test   %eax,%eax
     de5:	7e 6b                	jle    e52 <process_request+0x9e2>
					sdp_check_access(rec->handle, &req->device)) {
     de7:	8b 7d 00             	mov    0x0(%rbp),%edi
     dea:	48 89 de             	mov    %rbx,%rsi
     ded:	e8 00 00 00 00       	callq  df2 <process_request+0x982>
			if (sdp_match_uuid(pattern, rec->pattern) > 0 &&
     df2:	85 c0                	test   %eax,%eax
     df4:	74 5c                	je     e52 <process_request+0x9e2>
				status = extract_attrs(rec, seq, &tmpbuf);
     df6:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
				rsp_count++;
     dfb:	83 44 24 14 01       	addl   $0x1,0x14(%rsp)
	if (seq == NULL) {
     e00:	48 85 f6             	test   %rsi,%rsi
     e03:	74 13                	je     e18 <process_request+0x9a8>
     e05:	48 8d 54 24 70       	lea    0x70(%rsp),%rdx
     e0a:	48 89 ef             	mov    %rbp,%rdi
     e0d:	e8 00 00 00 00       	callq  e12 <process_request+0x9a2>
				if (status) {
     e12:	85 c0                	test   %eax,%eax
     e14:	89 c5                	mov    %eax,%ebp
     e16:	75 55                	jne    e6d <process_request+0x9fd>
				if (buf->data_size + tmpbuf.data_size < buf->buf_size) {
     e18:	8b 54 24 78          	mov    0x78(%rsp),%edx
     e1c:	8b 44 24 68          	mov    0x68(%rsp),%eax
     e20:	01 d0                	add    %edx,%eax
     e22:	3b 44 24 6c          	cmp    0x6c(%rsp),%eax
     e26:	0f 83 70 02 00 00    	jae    109c <process_request+0xc2c>
					sdp_append_to_buf(buf, tmpbuf.data, tmpbuf.data_size);
     e2c:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
     e31:	4c 89 ef             	mov    %r13,%rdi
     e34:	e8 00 00 00 00       	callq  e39 <process_request+0x9c9>
					memset(tmpbuf.data, 0, USHRT_MAX);
     e39:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
     e3e:	ba ff ff 00 00       	mov    $0xffff,%edx
     e43:	31 f6                	xor    %esi,%esi
					tmpbuf.data_size = 0;
     e45:	c7 44 24 78 00 00 00 	movl   $0x0,0x78(%rsp)
     e4c:	00 
					memset(tmpbuf.data, 0, USHRT_MAX);
     e4d:	e8 00 00 00 00       	callq  e52 <process_request+0x9e2>
		for (p = svcList; p; p = p->next) {
     e52:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
     e57:	48 8b 00             	mov    (%rax),%rax
     e5a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
     e5f:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
     e65:	0f 85 61 ff ff ff    	jne    dcc <process_request+0x95c>
     e6b:	31 ed                	xor    %ebp,%ebp
		if (buf->data_size > max) {
     e6d:	44 3b 64 24 68       	cmp    0x68(%rsp),%r12d
     e72:	0f 83 37 02 00 00    	jae    10af <process_request+0xc3f>
			newState.timestamp = sdp_cstate_alloc_buf(buf);
     e78:	4c 89 ef             	mov    %r13,%rdi
			memset((char *)&newState, 0, sizeof(sdp_cont_state_t));
     e7b:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
     e82:	00 00 
			newState.timestamp = sdp_cstate_alloc_buf(buf);
     e84:	e8 00 00 00 00       	callq  e89 <process_request+0xa19>
			cstate_size = sdp_set_cstate_pdu(buf, &newState);
     e89:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
     e8e:	4c 89 ef             	mov    %r13,%rdi
			buf->data_size = max;
     e91:	44 89 64 24 68       	mov    %r12d,0x68(%rsp)
			newState.cStateValue.maxBytesSent = max;
     e96:	66 44 89 64 24 44    	mov    %r12w,0x44(%rsp)
			newState.timestamp = sdp_cstate_alloc_buf(buf);
     e9c:	89 44 24 40          	mov    %eax,0x40(%rsp)
			cstate_size = sdp_set_cstate_pdu(buf, &newState);
     ea0:	e8 5b f1 ff ff       	callq  0 <sdp_set_cstate_pdu>
     ea5:	41 89 c4             	mov    %eax,%r12d
	if (!rsp_count && !cstate) {
     ea8:	83 7c 24 14 00       	cmpl   $0x0,0x14(%rsp)
     ead:	0f 85 73 fe ff ff    	jne    d26 <process_request+0x8b6>
     eb3:	e9 3f fe ff ff       	jmpq   cf7 <process_request+0x887>
		sdp_record_t *rec = sdp_record_find(handle);
     eb8:	89 ef                	mov    %ebp,%edi
     eba:	e8 00 00 00 00       	callq  ebf <process_request+0xa4f>
	if (!rec)
     ebf:	48 85 c0             	test   %rax,%rax
		status = extract_attrs(rec, seq, buf);
     ec2:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
	if (!rec)
     ec7:	0f 84 80 00 00 00    	je     f4d <process_request+0xadd>
	if (seq == NULL) {
     ecd:	48 85 f6             	test   %rsi,%rsi
     ed0:	74 72                	je     f44 <process_request+0xad4>
     ed2:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
     ed7:	48 89 c7             	mov    %rax,%rdi
     eda:	4c 89 ea             	mov    %r13,%rdx
     edd:	e8 00 00 00 00       	callq  ee2 <process_request+0xa72>
     ee2:	89 c5                	mov    %eax,%ebp
		if (buf->data_size > max_rsp_size) {
     ee4:	8b 44 24 68          	mov    0x68(%rsp),%eax
     ee8:	41 39 c4             	cmp    %eax,%r12d
     eeb:	72 22                	jb     f0f <process_request+0xa9f>
			if (buf->data_size == 0)
     eed:	85 c0                	test   %eax,%eax
     eef:	75 0c                	jne    efd <process_request+0xa8d>
				sdp_append_to_buf(buf, NULL, 0);
     ef1:	31 d2                	xor    %edx,%edx
     ef3:	31 f6                	xor    %esi,%esi
     ef5:	4c 89 ef             	mov    %r13,%rdi
     ef8:	e8 00 00 00 00       	callq  efd <process_request+0xa8d>
			cstate_size = sdp_set_cstate_pdu(buf, NULL);
     efd:	31 f6                	xor    %esi,%esi
     eff:	4c 89 ef             	mov    %r13,%rdi
     f02:	e8 f9 f0 ff ff       	callq  0 <sdp_set_cstate_pdu>
     f07:	41 89 c4             	mov    %eax,%r12d
     f0a:	e9 53 fc ff ff       	jmpq   b62 <process_request+0x6f2>
			newState.timestamp = sdp_cstate_alloc_buf(buf);
     f0f:	4c 89 ef             	mov    %r13,%rdi
			memset((char *)&newState, 0, sizeof(sdp_cont_state_t));
     f12:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
     f19:	00 00 
			newState.timestamp = sdp_cstate_alloc_buf(buf);
     f1b:	e8 00 00 00 00       	callq  f20 <process_request+0xab0>
			cstate_size = sdp_set_cstate_pdu(buf, &newState);
     f20:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
     f25:	4c 89 ef             	mov    %r13,%rdi
			buf->data_size = max_rsp_size;
     f28:	44 89 64 24 68       	mov    %r12d,0x68(%rsp)
			newState.cStateValue.maxBytesSent = max_rsp_size;
     f2d:	66 44 89 64 24 54    	mov    %r12w,0x54(%rsp)
			newState.timestamp = sdp_cstate_alloc_buf(buf);
     f33:	89 44 24 50          	mov    %eax,0x50(%rsp)
			cstate_size = sdp_set_cstate_pdu(buf, &newState);
     f37:	e8 c4 f0 ff ff       	callq  0 <sdp_set_cstate_pdu>
     f3c:	41 89 c4             	mov    %eax,%r12d
     f3f:	e9 1e fc ff ff       	jmpq   b62 <process_request+0x6f2>
		return 0;
     f44:	31 ed                	xor    %ebp,%ebp
     f46:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
     f4b:	eb 97                	jmp    ee4 <process_request+0xa74>
		return SDP_INVALID_RECORD_HANDLE;
     f4d:	bd 02 00 00 00       	mov    $0x2,%ebp
     f52:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
     f57:	eb 8b                	jmp    ee4 <process_request+0xa74>
		sdp_list_t *list = sdp_get_record_list();
     f59:	e8 00 00 00 00       	callq  f5e <process_request+0xaee>
     f5e:	49 89 c5             	mov    %rax,%r13
	pdata += sizeof(uint16_t);
     f61:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
		handleSize = 0;
     f66:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
     f6d:	00 
	uint16_t expected, actual, rsp_count = 0;
     f6e:	45 31 e4             	xor    %r12d,%r12d
	pdata += sizeof(uint16_t);
     f71:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
     f76:	eb 58                	jmp    fd0 <process_request+0xb60>
		for (; list && rsp_count < expected; list = list->next) {
     f78:	4d 85 ed             	test   %r13,%r13
     f7b:	74 5b                	je     fd8 <process_request+0xb68>
			sdp_record_t *rec = list->data;
     f7d:	4d 8b 45 08          	mov    0x8(%r13),%r8
			if (sdp_match_uuid(pattern, rec->pattern) > 0 &&
     f81:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
     f86:	49 8b 70 08          	mov    0x8(%r8),%rsi
     f8a:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
     f8f:	e8 9c f3 ff ff       	callq  330 <sdp_match_uuid>
     f94:	85 c0                	test   %eax,%eax
     f96:	7e 34                	jle    fcc <process_request+0xb5c>
					sdp_check_access(rec->handle, &req->device)) {
     f98:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
     f9d:	48 89 de             	mov    %rbx,%rsi
     fa0:	41 8b 38             	mov    (%r8),%edi
     fa3:	e8 00 00 00 00       	callq  fa8 <process_request+0xb38>
			if (sdp_match_uuid(pattern, rec->pattern) > 0 &&
     fa8:	85 c0                	test   %eax,%eax
     faa:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
     faf:	74 1b                	je     fcc <process_request+0xb5c>
     fb1:	41 8b 00             	mov    (%r8),%eax
	put_unaligned(cpu_to_be32(val), (uint32_t *) dst);
     fb4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
				rsp_count++;
     fb9:	41 83 c4 01          	add    $0x1,%r12d
				pdata += sizeof(uint32_t);
     fbd:	48 83 44 24 18 04    	addq   $0x4,0x18(%rsp)
				handleSize += sizeof(uint32_t);
     fc3:	83 44 24 20 04       	addl   $0x4,0x20(%rsp)
     fc8:	0f c8                	bswap  %eax
     fca:	89 01                	mov    %eax,(%rcx)
		for (; list && rsp_count < expected; list = list->next) {
     fcc:	4d 8b 6d 00          	mov    0x0(%r13),%r13
     fd0:	66 44 39 64 24 26    	cmp    %r12w,0x26(%rsp)
     fd6:	77 a0                	ja     f78 <process_request+0xb08>
		buf->data_size += handleSize;
     fd8:	8b 44 24 20          	mov    0x20(%rsp),%eax
     fdc:	01 44 24 68          	add    %eax,0x68(%rsp)
	put_unaligned(cpu_to_be16(val), (uint16_t *) ptr);
     fe0:	44 89 e0             	mov    %r12d,%eax
     fe3:	66 c1 c8 08          	ror    $0x8,%ax
		if (rsp_count > actual) {
     fe7:	66 44 3b 64 24 14    	cmp    0x14(%rsp),%r12w
     fed:	66 89 45 00          	mov    %ax,0x0(%rbp)
			cStateId = sdp_cstate_alloc_buf(buf);
     ff1:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
     ff6:	66 89 45 02          	mov    %ax,0x2(%rbp)
		if (rsp_count > actual) {
     ffa:	76 3e                	jbe    103a <process_request+0xbca>
			cStateId = sdp_cstate_alloc_buf(buf);
     ffc:	4c 89 ef             	mov    %r13,%rdi
     fff:	e8 00 00 00 00       	callq  1004 <process_request+0xb94>
	if (cstate || cStateId > 0) {
    1004:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
			buf->data_size -= handleSize;
    1009:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
    100d:	29 4c 24 68          	sub    %ecx,0x68(%rsp)
	if (cstate || cStateId > 0) {
    1011:	48 85 ff             	test   %rdi,%rdi
    1014:	0f 85 c8 f8 ff ff    	jne    8e2 <process_request+0x472>
    101a:	85 c0                	test   %eax,%eax
    101c:	74 15                	je     1033 <process_request+0xbc3>
			handleSize = actual << 2;
    101e:	0f b7 54 24 14       	movzwl 0x14(%rsp),%edx
			lastIndex = 0;
    1023:	45 31 db             	xor    %r11d,%r11d
			handleSize = actual << 2;
    1026:	44 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%r8d
    102d:	00 
    102e:	e9 2d fc ff ff       	jmpq   c60 <process_request+0x7f0>
	int status = 0, i, plen, mlen, mtu, scanned;
    1033:	31 ed                	xor    %ebp,%ebp
    1035:	e9 cc f6 ff ff       	jmpq   706 <process_request+0x296>
			sdp_set_cstate_pdu(buf, NULL);
    103a:	31 f6                	xor    %esi,%esi
    103c:	4c 89 ef             	mov    %r13,%rdi
    103f:	e8 bc ef ff ff       	callq  0 <sdp_set_cstate_pdu>
	if (cstate || cStateId > 0) {
    1044:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    1049:	48 85 ff             	test   %rdi,%rdi
    104c:	74 e5                	je     1033 <process_request+0xbc3>
	uint32_t cStateId = 0;
    104e:	31 c0                	xor    %eax,%eax
    1050:	e9 8d f8 ff ff       	jmpq   8e2 <process_request+0x472>
    1055:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
    105a:	e9 7d f4 ff ff       	jmpq   4dc <process_request+0x6c>
				cstate_size = sdp_set_cstate_pdu(buf, NULL);
    105f:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
    1064:	31 f6                	xor    %esi,%esi
	int status = 0, plen, mlen;
    1066:	31 ed                	xor    %ebp,%ebp
				cstate_size = sdp_set_cstate_pdu(buf, NULL);
    1068:	e8 93 ef ff ff       	callq  0 <sdp_set_cstate_pdu>
    106d:	41 89 c4             	mov    %eax,%r12d
    1070:	e9 ed fa ff ff       	jmpq   b62 <process_request+0x6f2>
	data_left -= scanned;
    1075:	4c 89 e6             	mov    %r12,%rsi
    1078:	48 8d 54 24 58       	lea    0x58(%rsp),%rdx
    107d:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
    1082:	48 29 c6             	sub    %rax,%rsi
    1085:	e8 96 f3 ff ff       	callq  420 <sdp_cstate_get.part.0>
	if (sdp_cstate_get(pdata, data_left, &cstate) < 0) {
    108a:	85 c0                	test   %eax,%eax
    108c:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
    1091:	0f 88 72 f7 ff ff    	js     809 <process_request+0x399>
    1097:	e9 7a f9 ff ff       	jmpq   a16 <process_request+0x5a6>
					error("Relocation needed");
    109c:	bf 00 00 00 00       	mov    $0x0,%edi
    10a1:	31 c0                	xor    %eax,%eax
    10a3:	31 ed                	xor    %ebp,%ebp
    10a5:	e8 00 00 00 00       	callq  10aa <process_request+0xc3a>
    10aa:	e9 be fd ff ff       	jmpq   e6d <process_request+0x9fd>
			cstate_size = sdp_set_cstate_pdu(buf, NULL);
    10af:	31 f6                	xor    %esi,%esi
    10b1:	4c 89 ef             	mov    %r13,%rdi
    10b4:	e8 47 ef ff ff       	callq  0 <sdp_set_cstate_pdu>
    10b9:	41 89 c4             	mov    %eax,%r12d
    10bc:	e9 e7 fd ff ff       	jmpq   ea8 <process_request+0xa38>
    10c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    10c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    10cd:	00 00 00 

00000000000010d0 <handle_internal_request>:

void handle_internal_request(int sk, int mtu, void *data, int len)
{
    10d0:	48 83 ec 38          	sub    $0x38,%rsp
	sdp_req_t req;

	bacpy(&req.device, BDADDR_ANY);
	bacpy(&req.bdaddr, BDADDR_LOCAL);
	req.local = 0;
	req.sock = sk;
    10d4:	89 7c 24 10          	mov    %edi,0x10(%rsp)
	req.mtu = mtu;
	req.flags = 0;
	req.buf = data;
	req.len = len;

	process_request(&req);
    10d8:	48 89 e7             	mov    %rsp,%rdi
{
	return memcmp(ba1, ba2, sizeof(bdaddr_t));
}
static inline void bacpy(bdaddr_t *dst, const bdaddr_t *src)
{
	memcpy(dst, src, sizeof(bdaddr_t));
    10db:	c6 04 24 00          	movb   $0x0,(%rsp)
    10df:	c6 44 24 01 00       	movb   $0x0,0x1(%rsp)
    10e4:	c6 44 24 02 00       	movb   $0x0,0x2(%rsp)
    10e9:	c6 44 24 03 00       	movb   $0x0,0x3(%rsp)
    10ee:	c6 44 24 04 00       	movb   $0x0,0x4(%rsp)
    10f3:	c6 44 24 05 00       	movb   $0x0,0x5(%rsp)
    10f8:	c6 44 24 06 00       	movb   $0x0,0x6(%rsp)
    10fd:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    1102:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
    1107:	c6 44 24 09 ff       	movb   $0xff,0x9(%rsp)
    110c:	c6 44 24 0a ff       	movb   $0xff,0xa(%rsp)
    1111:	c6 44 24 0b ff       	movb   $0xff,0xb(%rsp)
	req.local = 0;
    1116:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
    111d:	00 
	req.mtu = mtu;
    111e:	89 74 24 14          	mov    %esi,0x14(%rsp)
	req.flags = 0;
    1122:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
    1129:	00 
	req.buf = data;
    112a:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
	req.len = len;
    112f:	89 4c 24 28          	mov    %ecx,0x28(%rsp)
	process_request(&req);
    1133:	e8 38 f3 ff ff       	callq  470 <process_request>
}
    1138:	48 83 c4 38          	add    $0x38,%rsp
    113c:	c3                   	retq   
    113d:	0f 1f 00             	nopl   (%rax)

0000000000001140 <handle_request>:

void handle_request(int sk, uint8_t *data, int len)
{
    1140:	41 54                	push   %r12
    1142:	49 89 f4             	mov    %rsi,%r12
    1145:	55                   	push   %rbp
    1146:	89 d5                	mov    %edx,%ebp
    1148:	53                   	push   %rbx
    1149:	89 fb                	mov    %edi,%ebx
    114b:	48 83 ec 60          	sub    $0x60,%rsp
	struct sockaddr_l2 sa;
	socklen_t size;
	sdp_req_t req;

	size = sizeof(sa);
	if (getpeername(sk, (struct sockaddr *) &sa, &size) < 0) {
    114f:	48 8d 54 24 0c       	lea    0xc(%rsp),%rdx
    1154:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
	size = sizeof(sa);
    1159:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%rsp)
    1160:	00 
	if (getpeername(sk, (struct sockaddr *) &sa, &size) < 0) {
    1161:	e8 00 00 00 00       	callq  1166 <handle_request+0x26>
    1166:	85 c0                	test   %eax,%eax
    1168:	78 7e                	js     11e8 <handle_request+0xa8>
		error("getpeername: %s", strerror(errno));
		return;
	}

	if (sa.l2_family == AF_BLUETOOTH) {
    116a:	66 83 7c 24 20 1f    	cmpw   $0x1f,0x20(%rsp)
    1170:	0f 84 9a 00 00 00    	je     1210 <handle_request+0xd0>
    1176:	c6 44 24 30 00       	movb   $0x0,0x30(%rsp)
    117b:	c6 44 24 31 00       	movb   $0x0,0x31(%rsp)
    1180:	c6 44 24 32 00       	movb   $0x0,0x32(%rsp)
    1185:	c6 44 24 33 00       	movb   $0x0,0x33(%rsp)
    118a:	c6 44 24 34 00       	movb   $0x0,0x34(%rsp)
    118f:	c6 44 24 35 00       	movb   $0x0,0x35(%rsp)
    1194:	c6 44 24 36 00       	movb   $0x0,0x36(%rsp)
    1199:	c6 44 24 37 00       	movb   $0x0,0x37(%rsp)
    119e:	c6 44 24 38 00       	movb   $0x0,0x38(%rsp)
    11a3:	c6 44 24 39 ff       	movb   $0xff,0x39(%rsp)
    11a8:	c6 44 24 3a ff       	movb   $0xff,0x3a(%rsp)
    11ad:	c6 44 24 3b ff       	movb   $0xff,0x3b(%rsp)

		bacpy(&req.device, &sa.l2_bdaddr);
	} else {
		bacpy(&req.device, BDADDR_ANY);
		bacpy(&req.bdaddr, BDADDR_LOCAL);
		req.mtu = 2048;
    11b2:	c7 44 24 44 00 08 00 	movl   $0x800,0x44(%rsp)
    11b9:	00 
		req.local = 1;
    11ba:	c7 44 24 3c 01 00 00 	movl   $0x1,0x3c(%rsp)
    11c1:	00 

	req.sock = sk;
	req.buf  = data;
	req.len  = len;

	process_request(&req);
    11c2:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
	req.sock = sk;
    11c7:	89 5c 24 40          	mov    %ebx,0x40(%rsp)
	req.buf  = data;
    11cb:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
	req.len  = len;
    11d0:	89 6c 24 58          	mov    %ebp,0x58(%rsp)
	process_request(&req);
    11d4:	e8 97 f2 ff ff       	callq  470 <process_request>
}
    11d9:	48 83 c4 60          	add    $0x60,%rsp
    11dd:	5b                   	pop    %rbx
    11de:	5d                   	pop    %rbp
    11df:	41 5c                	pop    %r12
    11e1:	c3                   	retq   
    11e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		error("getpeername: %s", strerror(errno));
    11e8:	e8 00 00 00 00       	callq  11ed <handle_request+0xad>
    11ed:	8b 38                	mov    (%rax),%edi
    11ef:	e8 00 00 00 00       	callq  11f4 <handle_request+0xb4>
    11f4:	bf 00 00 00 00       	mov    $0x0,%edi
    11f9:	48 89 c6             	mov    %rax,%rsi
    11fc:	31 c0                	xor    %eax,%eax
    11fe:	e8 00 00 00 00       	callq  1203 <handle_request+0xc3>
}
    1203:	48 83 c4 60          	add    $0x60,%rsp
    1207:	5b                   	pop    %rbx
    1208:	5d                   	pop    %rbp
    1209:	41 5c                	pop    %r12
    120b:	c3                   	retq   
    120c:	0f 1f 40 00          	nopl   0x0(%rax)
		if (getsockopt(sk, SOL_L2CAP, L2CAP_OPTIONS, &lo, &size) < 0) {
    1210:	4c 8d 44 24 0c       	lea    0xc(%rsp),%r8
    1215:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
    121a:	ba 01 00 00 00       	mov    $0x1,%edx
    121f:	be 06 00 00 00       	mov    $0x6,%esi
    1224:	89 df                	mov    %ebx,%edi
		memset(&lo, 0, sizeof(lo));
    1226:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    122d:	00 00 
    122f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
    1236:	00 
		size = sizeof(lo);
    1237:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%rsp)
    123e:	00 
		if (getsockopt(sk, SOL_L2CAP, L2CAP_OPTIONS, &lo, &size) < 0) {
    123f:	e8 00 00 00 00       	callq  1244 <handle_request+0x104>
    1244:	85 c0                	test   %eax,%eax
    1246:	78 78                	js     12c0 <handle_request+0x180>
    1248:	8b 44 24 24          	mov    0x24(%rsp),%eax
		if (getsockname(sk, (struct sockaddr *) &sa, &size) < 0) {
    124c:	48 8d 54 24 0c       	lea    0xc(%rsp),%rdx
    1251:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    1256:	89 df                	mov    %ebx,%edi
		req.local = 0;
    1258:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%rsp)
    125f:	00 
		memset(&sa, 0, sizeof(sa));
    1260:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    1267:	00 00 
		size = sizeof(sa);
    1269:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%rsp)
    1270:	00 
    1271:	89 44 24 36          	mov    %eax,0x36(%rsp)
    1275:	0f b7 44 24 28       	movzwl 0x28(%rsp),%eax
		memset(&sa, 0, sizeof(sa));
    127a:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
    1281:	00 
    1282:	66 89 44 24 3a       	mov    %ax,0x3a(%rsp)
		req.mtu = lo.omtu;
    1287:	0f b7 44 24 10       	movzwl 0x10(%rsp),%eax
    128c:	89 44 24 44          	mov    %eax,0x44(%rsp)
		memset(&sa, 0, sizeof(sa));
    1290:	31 c0                	xor    %eax,%eax
    1292:	66 89 44 24 2c       	mov    %ax,0x2c(%rsp)
		if (getsockname(sk, (struct sockaddr *) &sa, &size) < 0) {
    1297:	e8 00 00 00 00       	callq  129c <handle_request+0x15c>
    129c:	85 c0                	test   %eax,%eax
    129e:	78 40                	js     12e0 <handle_request+0x1a0>
    12a0:	8b 44 24 24          	mov    0x24(%rsp),%eax
    12a4:	89 44 24 30          	mov    %eax,0x30(%rsp)
    12a8:	0f b7 44 24 28       	movzwl 0x28(%rsp),%eax
    12ad:	66 89 44 24 34       	mov    %ax,0x34(%rsp)
    12b2:	e9 0b ff ff ff       	jmpq   11c2 <handle_request+0x82>
    12b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    12be:	00 00 
			error("getsockopt: %s", strerror(errno));
    12c0:	e8 00 00 00 00       	callq  12c5 <handle_request+0x185>
    12c5:	8b 38                	mov    (%rax),%edi
    12c7:	e8 00 00 00 00       	callq  12cc <handle_request+0x18c>
    12cc:	bf 00 00 00 00       	mov    $0x0,%edi
    12d1:	48 89 c6             	mov    %rax,%rsi
    12d4:	31 c0                	xor    %eax,%eax
    12d6:	e8 00 00 00 00       	callq  12db <handle_request+0x19b>
			return;
    12db:	e9 f9 fe ff ff       	jmpq   11d9 <handle_request+0x99>
			error("getsockname: %s", strerror(errno));
    12e0:	e8 00 00 00 00       	callq  12e5 <handle_request+0x1a5>
    12e5:	8b 38                	mov    (%rax),%edi
    12e7:	e8 00 00 00 00       	callq  12ec <handle_request+0x1ac>
    12ec:	bf 00 00 00 00       	mov    $0x0,%edi
    12f1:	48 89 c6             	mov    %rax,%rsi
    12f4:	31 c0                	xor    %eax,%eax
    12f6:	e8 00 00 00 00       	callq  12fb <handle_request+0x1bb>
			return;
    12fb:	e9 d9 fe ff ff       	jmpq   11d9 <handle_request+0x99>

Disassembly of section .text.unlikely:

0000000000000000 <sdp_cstate_alloc_buf>:
	uint8_t *pdata = buf->data + buf->data_size;
   0:	41 54                	push   %r12
   2:	55                   	push   %rbp
   3:	48 89 fd             	mov    %rdi,%rbp
	if (cstate) {
   6:	bf 20 00 00 00       	mov    $0x20,%edi
		*pdata = sizeof(sdp_cont_state_t);
   b:	53                   	push   %rbx
   c:	e8 00 00 00 00       	callq  11 <sdp_cstate_alloc_buf+0x11>
		memcpy(pdata, cstate, sizeof(sdp_cont_state_t));
  11:	44 8b 65 08          	mov    0x8(%rbp),%r12d
  15:	48 89 c3             	mov    %rax,%rbx
  18:	4c 89 e7             	mov    %r12,%rdi
		length += sizeof(sdp_cont_state_t);
  1b:	e8 00 00 00 00       	callq  20 <sdp_cstate_alloc_buf+0x20>
	buf->data_size += length;
  20:	48 8b 75 00          	mov    0x0(%rbp),%rsi
}
  24:	48 89 c7             	mov    %rax,%rdi
  27:	4c 89 e1             	mov    %r12,%rcx
		*pdata = 0;
  2a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  2c:	48 89 c2             	mov    %rax,%rdx
  2f:	48 89 df             	mov    %rbx,%rdi
		length += sizeof(uint8_t);
  32:	31 c0                	xor    %eax,%eax
  34:	b1 08                	mov    $0x8,%cl
	buf->data_size += length;
  36:	f3 ab                	rep stos %eax,%es:(%rdi)
}
  38:	48 89 53 10          	mov    %rdx,0x10(%rbx)
  3c:	8b 45 08             	mov    0x8(%rbp),%eax
  3f:	89 43 18             	mov    %eax,0x18(%rbx)
{
  42:	8b 45 08             	mov    0x8(%rbp),%eax
  45:	89 43 1c             	mov    %eax,0x1c(%rbx)
  48:	e8 00 00 00 00       	callq  4d <sdp_cstate_alloc_buf+0x4d>
  4d:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 54 <sdp_cstate_alloc_buf+0x54>
  54:	89 43 08             	mov    %eax,0x8(%rbx)
  57:	48 89 1d 00 00 00 00 	mov    %rbx,0x0(%rip)        # 5e <sdp_cstate_alloc_buf+0x5e>
	scanned = sdp_extract_seqtype(buf, len, &seqType, &data_size);
  5e:	48 89 13             	mov    %rdx,(%rbx)
  61:	5b                   	pop    %rbx
  62:	5d                   	pop    %rbp
  63:	41 5c                	pop    %r12
  65:	c3                   	retq   

0000000000000066 <extract_attrs.part.1>:
  66:	41 57                	push   %r15
{
  68:	41 56                	push   %r14
  6a:	49 89 f6             	mov    %rsi,%r14
	int scanned, data_size = 0;
  6d:	41 55                	push   %r13
  6f:	49 89 d5             	mov    %rdx,%r13
  72:	41 54                	push   %r12
	scanned = sdp_extract_seqtype(buf, len, &seqType, &data_size);
  74:	49 89 fc             	mov    %rdi,%r12
  77:	55                   	push   %rbp
  78:	53                   	push   %rbx
	if (!scanned || (seqType != SDP_SEQ8 && seqType != SDP_SEQ16)) {
  79:	48 83 ec 18          	sub    $0x18,%rsp
	scanned = sdp_extract_seqtype(buf, len, &seqType, &data_size);
  7d:	48 89 e6             	mov    %rsp,%rsi
	if (!scanned || (seqType != SDP_SEQ8 && seqType != SDP_SEQ16)) {
  80:	e8 00 00 00 00       	callq  85 <extract_attrs.part.1+0x1f>
  85:	4d 85 f6             	test   %r14,%r14
  88:	0f 84 d7 00 00 00    	je     165 <extract_attrs.part.1+0xff>
  8e:	49 8b 46 08          	mov    0x8(%r14),%rax
  92:	8a 10                	mov    (%rax),%dl
  94:	80 fa 09             	cmp    $0x9,%dl
	p = buf + scanned;
  97:	75 16                	jne    af <extract_attrs.part.1+0x49>
		int localSeqLength = 0;
  99:	0f b7 70 04          	movzwl 0x4(%rax),%esi
  9d:	4c 89 e7             	mov    %r12,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <extract_attrs.part.1+0x3f>
	p = buf + scanned;
  a5:	48 85 c0             	test   %rax,%rax
	bufsize = len - scanned;
  a8:	75 7b                	jne    125 <extract_attrs.part.1+0xbf>
  aa:	e9 ae 00 00 00       	jmpq   15d <extract_attrs.part.1+0xf7>
  af:	80 fa 0a             	cmp    $0xa,%dl
		if (bufsize < sizeof(uint8_t)) {
  b2:	75 7e                	jne    132 <extract_attrs.part.1+0xcc>
  b4:	44 8b 78 04          	mov    0x4(%rax),%r15d
  b8:	44 89 f8             	mov    %r15d,%eax
	int status = 0;
  bb:	44 89 fd             	mov    %r15d,%ebp
	sdp_list_t *pSeq = NULL;
  be:	c1 e8 10             	shr    $0x10,%eax
  c1:	85 c0                	test   %eax,%eax
  c3:	89 c3                	mov    %eax,%ebx
	int seqlen = 0;
  c5:	75 48                	jne    10f <extract_attrs.part.1+0xa9>
  c7:	66 41 83 ff ff       	cmp    $0xffff,%r15w
		dataType = *p;
  cc:	75 41                	jne    10f <extract_attrs.part.1+0xa9>
  ce:	8b 44 24 08          	mov    0x8(%rsp),%eax
		if (expectedType == SDP_TYPE_UUID) {
  d2:	41 3b 45 0c          	cmp    0xc(%r13),%eax
  d6:	76 04                	jbe    dc <extract_attrs.part.1+0x76>
		} else if (expectedType == SDP_TYPE_ATTRID &&
  d8:	31 db                	xor    %ebx,%ebx
  da:	eb 33                	jmp    10f <extract_attrs.part.1+0xa9>
  dc:	89 c1                	mov    %eax,%ecx
  de:	48 8b 34 24          	mov    (%rsp),%rsi
		} else if (expectedType != SDP_TYPE_ATTRID && dataType != expectedType) {
  e2:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  e6:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  e8:	8b 44 24 08          	mov    0x8(%rsp),%eax
		switch (dataType) {
  ec:	41 89 45 08          	mov    %eax,0x8(%r13)
  f0:	eb 73                	jmp    165 <extract_attrs.part.1+0xff>
  f2:	0f b7 f3             	movzwl %bx,%esi
  f5:	4c 89 e7             	mov    %r12,%rdi
  f8:	e8 00 00 00 00       	callq  fd <extract_attrs.part.1+0x97>
  fd:	48 85 c0             	test   %rax,%rax
			puuid = malloc(sizeof(uuid_t));
 100:	74 0b                	je     10d <extract_attrs.part.1+0xa7>
 102:	48 89 c6             	mov    %rax,%rsi
 105:	4c 89 ef             	mov    %r13,%rdi
 108:	e8 00 00 00 00       	callq  10d <extract_attrs.part.1+0xa7>
			status = sdp_uuid_extract(p, bufsize, puuid, &localSeqLength);
 10d:	ff c3                	inc    %ebx
 10f:	66 39 dd             	cmp    %bx,%bp
 112:	77 de                	ja     f2 <extract_attrs.part.1+0x8c>
 114:	41 0f b7 f7          	movzwl %r15w,%esi
 118:	4c 89 e7             	mov    %r12,%rdi
 11b:	e8 00 00 00 00       	callq  120 <extract_attrs.part.1+0xba>
 120:	48 85 c0             	test   %rax,%rax
 123:	74 38                	je     15d <extract_attrs.part.1+0xf7>
 125:	48 89 c6             	mov    %rax,%rsi
			if (status < 0) {
 128:	4c 89 ef             	mov    %r13,%rdi
 12b:	e8 00 00 00 00       	callq  130 <extract_attrs.part.1+0xca>
 130:	eb 2b                	jmp    15d <extract_attrs.part.1+0xf7>
			seqlen += localSeqLength;
 132:	0f b6 f2             	movzbl %dl,%esi
 135:	bf 00 00 00 00       	mov    $0x0,%edi
			p += localSeqLength;
 13a:	31 c0                	xor    %eax,%eax
			bufsize -= localSeqLength;
 13c:	e8 00 00 00 00       	callq  141 <extract_attrs.part.1+0xdb>
		if (status == 0) {
 141:	31 c0                	xor    %eax,%eax
 143:	bf 00 00 00 00       	mov    $0x0,%edi
			pSeq = sdp_list_append(pSeq, pElem);
 148:	e8 00 00 00 00       	callq  14d <extract_attrs.part.1+0xe7>
 14d:	48 8b 3c 24          	mov    (%rsp),%rdi
 151:	e8 00 00 00 00       	callq  156 <extract_attrs.part.1+0xf0>
			if (seqlen == data_size)
 156:	b8 03 00 00 00       	mov    $0x3,%eax
			pSeq = sdp_list_append(pSeq, pElem);
 15b:	eb 13                	jmp    170 <extract_attrs.part.1+0x10a>
 15d:	4d 8b 36             	mov    (%r14),%r14
			if (seqlen == data_size)
 160:	e9 20 ff ff ff       	jmpq   85 <extract_attrs.part.1+0x1f>
			else if (seqlen > data_size || seqlen > len)
 165:	48 8b 3c 24          	mov    (%rsp),%rdi
 169:	e8 00 00 00 00       	callq  16e <extract_attrs.part.1+0x108>
		if (bufsize < sizeof(uint8_t)) {
 16e:	31 c0                	xor    %eax,%eax
 170:	48 83 c4 18          	add    $0x18,%rsp
		int localSeqLength = 0;
 174:	5b                   	pop    %rbx
 175:	5d                   	pop    %rbp
 176:	41 5c                	pop    %r12
 178:	41 5d                	pop    %r13
		if (bufsize < sizeof(uint8_t)) {
 17a:	41 5e                	pop    %r14
 17c:	41 5f                	pop    %r15
 17e:	c3                   	retq   
